'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

'Imports System
'Imports System.Collections.Generic
'Imports System.ComponentModel
'Imports System.Data
'Imports System.Data.Linq
'Imports System.Data.Linq.Mapping
'Imports System.Linq
'Imports System.Linq.Expressions
'Imports System.Reflection

Partial Public Class OrderProcess
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
   Partial Private Sub InsertAccountingUnits(ByVal instance As AccountingUnit)
   End Sub
   Partial Private Sub UpdateAccountingUnits(ByVal instance As AccountingUnit)
   End Sub
   Partial Private Sub DeleteAccountingUnits(ByVal instance As AccountingUnit)
   End Sub
   Partial Private Sub InsertConfirmedItems(ByVal instance As ConfirmedItem)
   End Sub
   Partial Private Sub UpdateConfirmedItems(ByVal instance As ConfirmedItem)
   End Sub
   Partial Private Sub DeleteConfirmedItems(ByVal instance As ConfirmedItem)
   End Sub
  Partial Private Sub InsertItemClass(instance As ItemClass)
    End Sub
  Partial Private Sub UpdateItemClass(instance As ItemClass)
    End Sub
  Partial Private Sub DeleteItemClass(instance As ItemClass)
    End Sub
   Partial Private Sub InsertItems(ByVal instance As Item)
   End Sub
   Partial Private Sub UpdateItems(ByVal instance As Item)
   End Sub
   Partial Private Sub DeleteItems(ByVal instance As Item)
   End Sub
   Partial Private Sub InsertOrderableItems(ByVal instance As OrderableItem)
   End Sub
   Partial Private Sub UpdateOrderableItems(ByVal instance As OrderableItem)
   End Sub
   Partial Private Sub DeleteOrderableItems(ByVal instance As OrderableItem)
   End Sub
   Partial Private Sub InsertOrderers(ByVal instance As Orderer)
   End Sub
   Partial Private Sub UpdateOrderers(ByVal instance As Orderer)
   End Sub
   Partial Private Sub DeleteOrderers(ByVal instance As Orderer)
   End Sub
   Partial Private Sub InsertOrderItems(ByVal instance As OrderItem)
   End Sub
   Partial Private Sub UpdateOrderItems(ByVal instance As OrderItem)
   End Sub
   Partial Private Sub DeleteOrderItems(ByVal instance As OrderItem)
   End Sub
   Partial Private Sub InsertOrders(ByVal instance As Order)
   End Sub
   Partial Private Sub UpdateOrders(ByVal instance As Order)
   End Sub
   Partial Private Sub DeleteOrders(ByVal instance As Order)
   End Sub
   Partial Private Sub InsertSuppliers(ByVal instance As Supplier)
   End Sub
   Partial Private Sub UpdateSuppliers(ByVal instance As Supplier)
   End Sub
   Partial Private Sub DeleteSuppliers(ByVal instance As Supplier)
   End Sub
  #End Region
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
   Public ReadOnly Property AccountingUnits() As System.Data.Linq.Table(Of AccountingUnit)
      Get
         Return Me.GetTable(Of AccountingUnit)()
      End Get
   End Property
   Public ReadOnly Property ConfirmedItems() As System.Data.Linq.Table(Of ConfirmedItem)
      Get
         Return Me.GetTable(Of ConfirmedItem)()
      End Get
   End Property
   Public ReadOnly Property ItemClasses() As System.Data.Linq.Table(Of ItemClass)
      Get
         Return Me.GetTable(Of ItemClass)()
      End Get
   End Property
   Public ReadOnly Property Items() As System.Data.Linq.Table(Of Item)
      Get
         Return Me.GetTable(Of Item)()
      End Get
   End Property
	Public ReadOnly Property OrderableItemOptions() As System.Data.Linq.Table(Of OrderableItemOptions)
		Get
			Return Me.GetTable(Of OrderableItemOptions)
		End Get
	End Property
   Public ReadOnly Property OrderableItems() As System.Data.Linq.Table(Of OrderableItem)
      Get
         Return Me.GetTable(Of OrderableItem)()
      End Get
   End Property
   Public ReadOnly Property Orderers() As System.Data.Linq.Table(Of Orderer)
      Get
         Return Me.GetTable(Of Orderer)()
      End Get
   End Property
   Public ReadOnly Property OrderItems() As System.Data.Linq.Table(Of OrderItem)
      Get
         Return Me.GetTable(Of OrderItem)()
      End Get
   End Property
   Public ReadOnly Property Orders() As System.Data.Linq.Table(Of Order)
      Get
         Return Me.GetTable(Of Order)()
      End Get
   End Property
   Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Supplier)
      Get
         Return Me.GetTable(Of Supplier)()
      End Get
   End Property
End Class

<Table(Name:="dbo.tblAccountingUnits")> _
Partial Public Class AccountingUnit
   Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

   Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

   Private _ID As Integer
   Private _sShortID As String
   Private _iCostCenter As System.Nullable(Of Long)
   Private _ConfirmedItem As EntitySet(Of ConfirmedItem)
   Private _Item As EntitySet(Of Item)

#Region "Extensibility Method Definitions"
   Partial Private Sub OnLoaded()
   End Sub
   Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
   End Sub
   Partial Private Sub OnCreated()
   End Sub
   Partial Private Sub OnIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OnIDChanged()
   End Sub
   Partial Private Sub OnsShortIDChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsShortIDChanged()
   End Sub
   Partial Private Sub OniCostCenterChanging(ByVal value As System.Nullable(Of Long))
   End Sub
   Partial Private Sub OniCostCenterChanged()
   End Sub
#End Region

   Public Sub New()
      MyBase.New()
      Me._ConfirmedItem = New EntitySet(Of ConfirmedItem)(AddressOf Me.attach_ConfirmedItem, AddressOf Me.detach_ConfirmedItem)
      Me._Item = New EntitySet(Of Item)(AddressOf Me.attach_Item, AddressOf Me.detach_Item)
      OnCreated()
   End Sub

   <Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
   Public Property ID() As Integer
      Get
         Return Me._ID
      End Get
      Set(ByVal value As Integer)
         If ((Me._ID = Value) _
            = False) Then
            Me.OnIDChanging(Value)
            Me.SendPropertyChanging()
            Me._ID = Value
            Me.SendPropertyChanged("ID")
            Me.OnIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sShortID", Storage:="_sShortID", DbType:="NVarChar(64) NOT NULL", CanBeNull:=False)> _
   Public Property ShortID() As String
      Get
         Return Me._sShortID
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sShortID, value) = False) Then
            Me.OnsShortIDChanging(value)
            Me.SendPropertyChanging()
            Me._sShortID = value
            Me.SendPropertyChanged("sShortID")
            Me.OnsShortIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="iCostCenter", Storage:="_iCostCenter", DbType:="BigInt")> _
   Public Property CostCenter() As System.Nullable(Of Long)
      Get
         Return Me._iCostCenter
      End Get
      Set(ByVal value As System.Nullable(Of Long))
         If (Me._iCostCenter.Equals(value) = False) Then
            Me.OniCostCenterChanging(value)
            Me.SendPropertyChanging()
            Me._iCostCenter = value
            Me.SendPropertyChanged("iCostCenter")
            Me.OniCostCenterChanged()
         End If
      End Set
   End Property

   <Association(Name:="FK_tblConfirmedItems_tblAccountingUnits", Storage:="_ConfirmedItem", ThisKey:="ID", OtherKey:="AccountingUnitID", DeleteRule:="NO ACTION")> _
   Public Property ConfirmedItem() As EntitySet(Of ConfirmedItem)
      Get
         Return Me._ConfirmedItem
      End Get
      Set(ByVal value As EntitySet(Of ConfirmedItem))
         Me._ConfirmedItem.Assign(value)
      End Set
   End Property
   <Association(Name:="FK_tblItems_tblAccountingUnits", Storage:="_Item", ThisKey:="ID", OtherKey:="AccountingUnitID", DeleteRule:="CASCADE")> _
   Public Property Item() As EntitySet(Of Item)
      Get
         Return Me._Item
      End Get
      Set(ByVal value As EntitySet(Of Item))
         Me._Item.Assign(value)
      End Set
   End Property

   Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
   Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

   Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
   End Sub
   Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
   End Sub

   Private Sub attach_ConfirmedItem(ByVal entity As ConfirmedItem)
      Me.SendPropertyChanging()
      entity.AccountingUnit = Me
   End Sub
   Private Sub detach_ConfirmedItem(ByVal entity As ConfirmedItem)
      Me.SendPropertyChanging()
      entity.AccountingUnit = Nothing
   End Sub
   Private Sub attach_Item(ByVal entity As Item)
      Me.SendPropertyChanging()
      entity.AccountingUnit = Me
   End Sub
   Private Sub detach_Item(ByVal entity As Item)
      Me.SendPropertyChanging()
      entity.AccountingUnit = Nothing
   End Sub
   Public ReadOnly Property TreeNode() As TreeNode
      Get
         Dim nd As New TreeNode(ShortID)
         nd.Tag = ID
         nd.ImageKey = "AccountingUnit"
         nd.SelectedImageKey = nd.ImageKey
         Return nd
      End Get
   End Property
End Class
Public Class ACUComparer
   Implements IComparer(Of AccountingUnit)

   Public Function Compare(ByVal x As AccountingUnit, ByVal y As AccountingUnit) As Integer Implements System.Collections.Generic.IComparer(Of AccountingUnit).Compare
      If x Is Nothing Then
         If y Is Nothing Then
            Return 0
         Else
            Return -1
         End If
      Else
         If y Is Nothing Then
            Return 1
         Else
            If x.ShortID > y.ShortID Then
               Return 1
            ElseIf x.ShortID = y.ShortID Then
               Return 0
            Else
               Return -1
            End If
         End If
      End If
   End Function
End Class
Public Class AccountingUnitPredicate
   Private _ID As Integer
   Private _ShortID As String

   Public Sub New(ByVal ID As Integer)
      _ID = ID
   End Sub
   Public Sub New(ByVal ShortID As String)
      _ShortID = ShortID
   End Sub

   Public Function CompareIDs(ByVal obj As AccountingUnit) As Boolean
      Return (_ID = obj.ID)
   End Function
   Public Function CompareShortID(ByVal obj As AccountingUnit) As Boolean
      Return (_ShortID = obj.ShortID)
   End Function
End Class

<Table(Name:="dbo.tblConfirmedItems")> _
Partial Public Class ConfirmedItem
   Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

   Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

   Private _ID As Integer
   Private _iOrderableItemsID As Integer
   Private _iQuantityOrdererd As Integer
   Private _sOrderer As String
   Private _sRecipientName As String
   Private _sCostCenterResponsible As String
   Private _sItManager As String
   Private _iAccountingUnitID As Integer
   Private _sNotesURL As String
   Private _dDateConfirmed As System.Nullable(Of Date)
   Private _dDateOrdered As System.Nullable(Of Date)
   Private _iQuantityAssigned As System.Nullable(Of Integer)
   Private _dDateAssigned As System.Nullable(Of Date)
   Private _AccountingUnit As EntityRef(Of AccountingUnit)
   Private _OrderableItem As EntityRef(Of OrderableItem)

#Region "Extensibility Method Definitions"
   Partial Private Sub OnLoaded()
   End Sub
   Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
   End Sub
   Partial Private Sub OnCreated()
   End Sub
   Partial Private Sub OnIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OnIDChanged()
   End Sub
   Partial Private Sub OniOrderableItemsIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OniOrderableItemsIDChanged()
   End Sub
   Partial Private Sub OniQuantityOrderedChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OniQuantityOrderedChanged()
   End Sub
   Partial Private Sub OnsOrdererChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsOrdererChanged()
   End Sub
   Partial Private Sub OnsRecipientNameChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsRecipientNameChanged()
   End Sub
   Partial Private Sub OnsCostCenterResponsibleChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsCostCenterResponsibleChanged()
   End Sub
   Partial Private Sub OnsItManagerChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsItManagerChanged()
   End Sub
   Partial Private Sub OniAccountingUnitIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OniAccountingUnitIDChanged()
   End Sub
   Partial Private Sub OnsNotesURLChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsNotesURLChanged()
   End Sub
   Partial Private Sub OndDateConfirmedChanging(ByVal value As System.Nullable(Of Date))
   End Sub
   Partial Private Sub OndDateConfirmedChanged()
   End Sub
   Partial Private Sub OndDateOrderedChanging(ByVal value As System.Nullable(Of Date))
   End Sub
   Partial Private Sub OndDateOrderedChanged()
   End Sub
   Partial Private Sub OniQuantityAssignedChanging(ByVal value As System.Nullable(Of Integer))
   End Sub
   Partial Private Sub OniQuantityAssignedChanged()
   End Sub
   Partial Private Sub OndDateAssignedChanging(ByVal value As System.Nullable(Of Date))
   End Sub
   Partial Private Sub OndDateAssignedChanged()
   End Sub
#End Region

   Public Sub New()
      MyBase.New()
      Me._AccountingUnit = CType(Nothing, EntityRef(Of AccountingUnit))
      Me._OrderableItem = CType(Nothing, EntityRef(Of OrderableItem))
      OnCreated()
   End Sub

   <Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
   Public Property ID() As Integer
      Get
         Return Me._ID
      End Get
      Set(ByVal value As Integer)
         If ((Me._ID = Value) _
            = False) Then
            Me.OnIDChanging(Value)
            Me.SendPropertyChanging()
            Me._ID = Value
            Me.SendPropertyChanged("ID")
            Me.OnIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="iOrderableItemsID", Storage:="_iOrderableItemsID", DbType:="Int NOT NULL")> _
   Public Property OrderableItemsID() As Integer
      Get
         Return Me._iOrderableItemsID
      End Get
      Set(ByVal value As Integer)
         If ((Me._iOrderableItemsID = value) _
            = False) Then
            If Me._OrderableItem.HasLoadedOrAssignedValue Then
               Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
            End If
            Me.OniOrderableItemsIDChanging(value)
            Me.SendPropertyChanging()
            Me._iOrderableItemsID = value
            Me.SendPropertyChanged("iOrderableItemsID")
            Me.OniOrderableItemsIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="iQuantityOrdered", Storage:="_iQuantityOrdererd", DbType:="Int NOT NULL")> _
   Public Property QuantityOrdered() As Integer
      Get
         Return Me._iQuantityOrdererd
      End Get
      Set(ByVal value As Integer)
         If ((Me._iQuantityOrdererd = value) _
            = False) Then
            Me.OniQuantityOrderedChanging(value)
            Me.SendPropertyChanging()
            Me._iQuantityOrdererd = value
            Me.SendPropertyChanged("iQuantityOrdered")
            Me.OniQuantityOrderedChanged()
         End If
      End Set
   End Property
   <Column(Name:="sOrderer", Storage:="_sOrderer", DbType:="NVarChar(255)")> _
   Public Property Orderer() As String
      Get
         Return Me._sOrderer
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sOrderer, value) = False) Then
            Me.OnsOrdererChanging(value)
            Me.SendPropertyChanging()
            Me._sOrderer = value
            Me.SendPropertyChanged("sOrderer")
            Me.OnsOrdererChanged()
         End If
      End Set
   End Property
   <Column(Name:="sRecipientName", Storage:="_sRecipientName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=False)> _
   Public Property RecipientName() As String
      Get
         Return Me._sRecipientName
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sRecipientName, value) = False) Then
            Me.OnsRecipientNameChanging(value)
            Me.SendPropertyChanging()
            Me._sRecipientName = value
            Me.SendPropertyChanged("sRecipientName")
            Me.OnsRecipientNameChanged()
         End If
      End Set
   End Property
   <Column(Name:="sCostCenterResponsible", Storage:="_sCostCenterResponsible", DbType:="NVarChar(255)")> _
   Public Property CostCenterResponsible() As String
      Get
         Return Me._sCostCenterResponsible
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sCostCenterResponsible, value) = False) Then
            Me.OnsCostCenterResponsibleChanging(value)
            Me.SendPropertyChanging()
            Me._sCostCenterResponsible = value
            Me.SendPropertyChanged("sCostCenterResponsible")
            Me.OnsCostCenterResponsibleChanged()
         End If
      End Set
   End Property
   <Column(Name:="sItManager", Storage:="_sItManager", DbType:="NVarChar(255)")> _
   Public Property ITManager() As String
      Get
         Return Me._sItManager
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sItManager, value) = False) Then
            Me.OnsItManagerChanging(value)
            Me.SendPropertyChanging()
            Me._sItManager = value
            Me.SendPropertyChanged("sItManager")
            Me.OnsItManagerChanged()
         End If
      End Set
   End Property
   <Column(Name:="iAccountingUnitID", Storage:="_iAccountingUnitID", DbType:="Int NOT NULL")> _
   Public Property AccountingUnitID() As Integer
      Get
         Return Me._iAccountingUnitID
      End Get
      Set(ByVal value As Integer)
         If ((Me._iAccountingUnitID = value) _
            = False) Then
            If Me._AccountingUnit.HasLoadedOrAssignedValue Then
               Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
            End If
            Me.OniAccountingUnitIDChanging(value)
            Me.SendPropertyChanging()
            Me._iAccountingUnitID = value
            Me.SendPropertyChanged("iAccountingUnitID")
            Me.OniAccountingUnitIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sNotesURL", Storage:="_sNotesURL", DbType:="NVarChar(128) NOT NULL", CanBeNull:=False)> _
   Public Property NotesURL() As String
      Get
         Return Me._sNotesURL
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sNotesURL, value) = False) Then
            Me.OnsNotesURLChanging(value)
            Me.SendPropertyChanging()
            Me._sNotesURL = value
            Me.SendPropertyChanged("sNotesURL")
            Me.OnsNotesURLChanged()
         End If
      End Set
   End Property
   <Column(Name:="dDateConfirmed", Storage:="_dDateConfirmed", DbType:="DateTime")> _
   Public Property DateConfirmed() As System.Nullable(Of Date)
      Get
         Return Me._dDateConfirmed
      End Get
      Set(ByVal value As System.Nullable(Of Date))
         If (Me._dDateConfirmed.Equals(value) = False) Then
            Me.OndDateConfirmedChanging(value)
            Me.SendPropertyChanging()
            Me._dDateConfirmed = value
            Me.SendPropertyChanged("dDateConfirmed")
            Me.OndDateConfirmedChanged()
         End If
      End Set
   End Property
   <Column(Name:="dDateOrdered", Storage:="_dDateOrdered", DbType:="DateTime")> _
   Public Property DateOrdered() As System.Nullable(Of Date)
      Get
         Return Me._dDateOrdered
      End Get
      Set(ByVal value As System.Nullable(Of Date))
         If (Me._dDateOrdered.Equals(value) = False) Then
            Me.OndDateOrderedChanging(value)
            Me.SendPropertyChanging()
            Me._dDateOrdered = value
            Me.SendPropertyChanged("dDateOrdered")
            Me.OndDateOrderedChanged()
         End If
      End Set
   End Property
   <Column(Name:="iQuantityAssigned", Storage:="_iQuantityAssigned", DbType:="Int")> _
   Public Property QuantityAssigned() As System.Nullable(Of Integer)
      Get
         Return Me._iQuantityAssigned
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
         If (Me._iQuantityAssigned.Equals(value) = False) Then
            Me.OniQuantityAssignedChanging(value)
            Me.SendPropertyChanging()
            Me._iQuantityAssigned = value
            Me.SendPropertyChanged("iQuantityAssigned")
            Me.OniQuantityAssignedChanged()
         End If
      End Set
   End Property
   <Column(Name:="dDateAssigned", Storage:="_dDateAssigned", DbType:="DateTime")> _
   Public Property DateAssigned() As System.Nullable(Of Date)
      Get
         Return Me._dDateAssigned
      End Get
      Set(ByVal value As System.Nullable(Of Date))
         If (Me._dDateAssigned.Equals(value) = False) Then
            Me.OndDateAssignedChanging(value)
            Me.SendPropertyChanging()
            Me._dDateAssigned = value
            Me.SendPropertyChanged("dDateAssigned")
            Me.OndDateAssignedChanged()
         End If
      End Set
   End Property

   <Association(Name:="FK_tblConfirmedItems_tblAccountingUnits", Storage:="_AccountingUnit", ThisKey:="AccountingUnitID", OtherKey:="ID", IsForeignKey:=True)> _
   Public Property AccountingUnit() As AccountingUnit
      Get
         Return Me._AccountingUnit.Entity
      End Get
      Set(ByVal value As AccountingUnit)
         Dim previousValue As AccountingUnit = Me._AccountingUnit.Entity
         If ((Object.Equals(previousValue, value) = False) _
            OrElse (Me._AccountingUnit.HasLoadedOrAssignedValue = False)) Then
            Me.SendPropertyChanging()
            If ((previousValue Is Nothing) _
               = False) Then
               Me._AccountingUnit.Entity = Nothing
               previousValue.ConfirmedItem.Remove(Me)
            End If
            Me._AccountingUnit.Entity = value
            If ((value Is Nothing) _
               = False) Then
               value.ConfirmedItem.Add(Me)
               Me._iAccountingUnitID = value.ID
            Else
               Me._iAccountingUnitID = CType(Nothing, Integer)
            End If
            Me.SendPropertyChanged("AccountingUnit")
         End If
      End Set
   End Property
   <Association(Name:="FK_tblConfirmedItems_tblOrderableItems", Storage:="_OrderableItem", ThisKey:="OrderableItemsID", OtherKey:="ID", IsForeignKey:=True)> _
   Public Property OrderableItem() As OrderableItem
      Get
         Return Me._OrderableItem.Entity
      End Get
      Set(ByVal value As OrderableItem)
         Dim previousValue As OrderableItem = Me._OrderableItem.Entity
         If ((Object.Equals(previousValue, value) = False) _
            OrElse (Me._OrderableItem.HasLoadedOrAssignedValue = False)) Then
            Me.SendPropertyChanging()
            If ((previousValue Is Nothing) _
               = False) Then
               Me._OrderableItem.Entity = Nothing
               previousValue.ConfirmedItem.Remove(Me)
            End If
            Me._OrderableItem.Entity = value
            If ((value Is Nothing) _
               = False) Then
               value.ConfirmedItem.Add(Me)
               Me._iOrderableItemsID = value.ID
            Else
               Me._iOrderableItemsID = CType(Nothing, Integer)
            End If
            Me.SendPropertyChanged("OrderableItem")
         End If
      End Set
   End Property

   Public Property sOrderableItem() As String
      Get
         Return OrderableItem.ManufacturerModel
      End Get
      Set(ByVal value As String)
         OrderableItem.ManufacturerModel = value
      End Set
   End Property
   Public Property sAccountingUnit() As String
      Get
         Return AccountingUnit.ShortID
      End Get
      Set(ByVal value As String)
         AccountingUnit.ShortID = value
      End Set
   End Property
   Public Property sItemClass() As String
      Get
         Return OrderableItem.DeviceCategory
      End Get
      Set(ByVal value As String)
         OrderableItem.DeviceCategory = value
      End Set
   End Property

   Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
   Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

   Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
   End Sub
   Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
   End Sub
End Class
Public Class ConfirmedItemPredicate
   Private _ID As Integer
   Private _ManufacturerModel As String

   Public Sub New(ByVal ID As Integer)
      _ID = ID
   End Sub
   Public Sub New(ByVal ManufacturerModel As String)
      _ManufacturerModel = ManufacturerModel
   End Sub

   Public Function CompareIDs(ByVal obj As ConfirmedItem) As Boolean
      Return (_ID = obj.ID)
   End Function
   Public Function CompareManufacturerModel(ByVal obj As ConfirmedItem) As Boolean
      Return (_ManufacturerModel = obj.OrderableItem.ManufacturerModel)
   End Function
End Class

<Table(Name:="dbo.tblItemClass")>  _
Partial Public Class ItemClass
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	Private _ID As Integer
	Private _sShortID As String
	Private _sDescription As String
   Private _OrderableItem As EntitySet(Of OrderableItem)
   Private _OrderItem As EntitySet(Of OrderItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnsShortIDChanging(value As String)
    End Sub
    Partial Private Sub OnsShortIDChanged()
    End Sub
    Partial Private Sub OnsDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnsDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
      Me._OrderableItem = New EntitySet(Of OrderableItem)(AddressOf Me.attach_OrderableItem, AddressOf Me.detach_OrderableItem)
      Me._OrderItem = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItem, AddressOf Me.detach_OrderItem)
		OnCreated
	End Sub
	
	<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
   <Column(Name:="sShortID", Storage:="_sShortID", DbType:="NVarChar(64) NOT NULL", CanBeNull:=False)> _
 Public Property ShortID() As String
      Get
         Return Me._sShortID
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sShortID, value) = False) Then
            Me.OnsShortIDChanging(value)
            Me.SendPropertyChanging()
            Me._sShortID = value
            Me.SendPropertyChanged("sShortID")
            Me.OnsShortIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sDescription", Storage:="_sDescription", DbType:="NVarChar(256)")> _
   Public Property Description() As String
      Get
         Return Me._sDescription
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sDescription, value) = False) Then
            Me.OnsDescriptionChanging(value)
            Me.SendPropertyChanging()
            Me._sDescription = value
            Me.SendPropertyChanged("sDescription")
            Me.OnsDescriptionChanged()
         End If
      End Set
   End Property

   <Association(Name:="FK_tblOrderableItems_tblItemClass", Storage:="_OrderableItem", ThisKey:="ID", OtherKey:="ItemClassID", DeleteRule:="NO ACTION")> _
 Public Property OrderableItem() As EntitySet(Of OrderableItem)
      Get
         Return Me._OrderableItem
      End Get
      Set(ByVal value As EntitySet(Of OrderableItem))
         Me._OrderableItem.Assign(value)
      End Set
   End Property
   <Association(Name:="FK_tblOrderItems_tblItemClass", Storage:="_OrderItem", ThisKey:="ID", OtherKey:="ItemClassID", DeleteRule:="CASCADE")> _
 Public Property OrderItem() As EntitySet(Of OrderItem)
      Get
         Return Me._OrderItem
      End Get
      Set(ByVal value As EntitySet(Of OrderItem))
         Me._OrderItem.Assign(value)
      End Set
   End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
   Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
   Private Sub attach_OrderableItem(ByVal entity As OrderableItem)
      Me.SendPropertyChanging()
      entity.ItemClass = Me
   End Sub
   Private Sub detach_OrderableItem(ByVal entity As OrderableItem)
      Me.SendPropertyChanging()
      entity.ItemClass = Nothing
   End Sub
   Private Sub attach_OrderItem(ByVal entity As OrderItem)
      Me.SendPropertyChanging()
      entity.ItemClass = Me
   End Sub
   Private Sub detach_OrderItem(ByVal entity As OrderItem)
      Me.SendPropertyChanging()
      entity.ItemClass = Nothing
   End Sub

   Public ReadOnly Property TreeNode() As TreeNode
      Get
         Dim nd As New TreeNode(ShortID)
         nd.Tag = ID
         If ShortID = "HW" Then
            nd.ImageKey = "HW"
         ElseIf ShortID.StartsWith("SW") Then
            nd.ImageKey = "SW"
         ElseIf ShortID = "NonIT" Then
            nd.ImageKey = "NonIT"
         End If
         nd.SelectedImageKey = nd.ImageKey
         Return nd
      End Get
   End Property
End Class
Public Class ItemClassPredicate
   Private _ID As Integer
   Private _ShortID As String

   Public Sub New(ByVal ID As Integer)
      _ID = ID
   End Sub
   Public Sub New(ByVal ShortID As String)
      _ShortID = ShortID
   End Sub

   Public Function CompareIDs(ByVal obj As ItemClass) As Boolean
      Return (_ID = obj.ID)
   End Function
   Public Function CompareShortID(ByVal obj As ItemClass) As Boolean
      Return (_ShortID = obj.ShortID)
   End Function
End Class

<Table(Name:="dbo.tblItems")> _
Partial Public Class Item
   Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

   Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

   Private _ID As Integer
   Private _iOrderItemID As Integer
   Private _sItemID As String
   Private _dDelivery As Date
   Private _cPrice As Double
   Private _sDeliverer As String
   Private _sRecipient As String
   Private _iAccountingUnitID As System.Nullable(Of Integer)
   Private _dAccounting As System.Nullable(Of Date)
   Private _AccountingUnit As EntityRef(Of AccountingUnit)
   Private _OrderItem As EntityRef(Of OrderItem)

#Region "Extensibility Method Definitions"
   Partial Private Sub OnLoaded()
   End Sub
   Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
   End Sub
   Partial Private Sub OnCreated()
   End Sub
   Partial Private Sub OnIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OnIDChanged()
   End Sub
   Partial Private Sub OniOrderItemIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OniOrderItemIDChanged()
   End Sub
   Partial Private Sub OnsItemIDChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsItemIDChanged()
   End Sub
   Partial Private Sub OndDeliveryChanging(ByVal value As Date)
   End Sub
   Partial Private Sub OndDeliveryChanged()
   End Sub
   Partial Private Sub OncPriceChanging(ByVal value As Double)
   End Sub
   Partial Private Sub OncPriceChanged()
   End Sub
   Partial Private Sub OnsDelivererChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsDelivererChanged()
   End Sub
   Partial Private Sub OnsRecipientChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsRecipientChanged()
   End Sub
   Partial Private Sub OniAccountingUnitIDChanging(ByVal value As System.Nullable(Of Integer))
   End Sub
   Partial Private Sub OniAccountingUnitIDChanged()
   End Sub
   Partial Private Sub OndAccountingChanging(ByVal value As System.Nullable(Of Date))
   End Sub
   Partial Private Sub OndAccountingChanged()
   End Sub
#End Region

   Public Sub New()
      MyBase.New()
      Me._AccountingUnit = CType(Nothing, EntityRef(Of AccountingUnit))
      Me._OrderItem = CType(Nothing, EntityRef(Of OrderItem))
      OnCreated()
   End Sub

   <Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
   Public Property ID() As Integer
      Get
         Return Me._ID
      End Get
      Set(ByVal value As Integer)
         If ((Me._ID = Value) _
            = False) Then
            Me.OnIDChanging(Value)
            Me.SendPropertyChanging()
            Me._ID = Value
            Me.SendPropertyChanged("ID")
            Me.OnIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="iOrderItemID", Storage:="_iOrderItemID", DbType:="Int NOT NULL")> _
   Public Property OrderItemID() As Integer
      Get
         Return Me._iOrderItemID
      End Get
      Set(ByVal value As Integer)
         If ((Me._iOrderItemID = value) _
            = False) Then
            If Me._OrderItem.HasLoadedOrAssignedValue Then
               Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
            End If
            Me.OniOrderItemIDChanging(value)
            Me.SendPropertyChanging()
            Me._iOrderItemID = value
            Me.SendPropertyChanged("iOrderItemID")
            Me.OniOrderItemIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sItemID", Storage:="_sItemID", DbType:="NVarChar(64)")> _
   Public Property ItemID() As String
      Get
         Return Me._sItemID
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sItemID, value) = False) Then
            Me.OnsItemIDChanging(value)
            Me.SendPropertyChanging()
            Me._sItemID = value
            Me.SendPropertyChanged("sItemID")
            Me.OnsItemIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="dDelivery", Storage:="_dDelivery", DbType:="DateTime NOT NULL")> _
   Public Property Delivery() As Date
      Get
         Return Me._dDelivery
      End Get
      Set(ByVal value As Date)
         If ((Me._dDelivery = value) _
            = False) Then
            Me.OndDeliveryChanging(value)
            Me.SendPropertyChanging()
            Me._dDelivery = value
            Me.SendPropertyChanged("dDelivery")
            Me.OndDeliveryChanged()
         End If
      End Set
   End Property
   <Column(Name:="cPrice", Storage:="_cPrice", DbType:="Float NOT NULL")> _
 Public Property Price() As Double
      Get
         Return Me._cPrice
      End Get
      Set(ByVal value As Double)
         If ((Me._cPrice = value) _
            = False) Then
            Me.OncPriceChanging(value)
            Me.SendPropertyChanging()
            Me._cPrice = value
            Me.SendPropertyChanged("cPrice")
            Me.OncPriceChanged()
         End If
      End Set
   End Property
   <Column(Name:="sDeliverer", Storage:="_sDeliverer", DbType:="NVarChar(64)")> _
   Public Property Deliverer() As String
      Get
         Return Me._sDeliverer
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sDeliverer, value) = False) Then
            Me.OnsDelivererChanging(value)
            Me.SendPropertyChanging()
            Me._sDeliverer = value
            Me.SendPropertyChanged("sDeliverer")
            Me.OnsDelivererChanged()
         End If
      End Set
   End Property
   <Column(Name:="sRecipient", Storage:="_sRecipient", DbType:="NVarChar(64)")> _
   Public Property Recipient() As String
      Get
         Return Me._sRecipient
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sRecipient, value) = False) Then
            Me.OnsRecipientChanging(value)
            Me.SendPropertyChanging()
            Me._sRecipient = value
            Me.SendPropertyChanged("sRecipient")
            Me.OnsRecipientChanged()
         End If
      End Set
   End Property
   <Column(Name:="iAccountingUnitID", Storage:="_iAccountingUnitID", DbType:="Int")> _
   Public Property AccountingUnitID() As System.Nullable(Of Integer)
      Get
         Return Me._iAccountingUnitID
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
         If (Me._iAccountingUnitID.Equals(value) = False) Then
            If Me._AccountingUnit.HasLoadedOrAssignedValue Then
               Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
            End If
            Me.OniAccountingUnitIDChanging(value)
            Me.SendPropertyChanging()
            Me._iAccountingUnitID = value
            Me.SendPropertyChanged("iAccountingUnitID")
            Me.OniAccountingUnitIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="dAccounting", Storage:="_dAccounting", DbType:="DateTime")> _
   Public Property Accounting() As System.Nullable(Of Date)
      Get
         Return Me._dAccounting
      End Get
      Set(ByVal value As System.Nullable(Of Date))
         If (Me._dAccounting.Equals(value) = False) Then
            Me.OndAccountingChanging(value)
            Me.SendPropertyChanging()
            Me._dAccounting = value
            Me.SendPropertyChanged("dAccounting")
            Me.OndAccountingChanged()
         End If
      End Set
   End Property

   <Association(Name:="FK_tblItems_tblAccountingUnits", Storage:="_AccountingUnit", ThisKey:="AccountingUnitID", OtherKey:="ID", IsForeignKey:=True)> _
   Public Property AccountingUnit() As AccountingUnit
      Get
         Return Me._AccountingUnit.Entity
      End Get
      Set(ByVal value As AccountingUnit)
         Dim previousValue As AccountingUnit = Me._AccountingUnit.Entity
         If ((Object.Equals(previousValue, value) = False) _
            OrElse (Me._AccountingUnit.HasLoadedOrAssignedValue = False)) Then
            Me.SendPropertyChanging()
            If ((previousValue Is Nothing) _
               = False) Then
               Me._AccountingUnit.Entity = Nothing
               previousValue.Item.Remove(Me)
            End If
            Me._AccountingUnit.Entity = value
            If ((value Is Nothing) _
               = False) Then
               value.Item.Add(Me)
               Me._iAccountingUnitID = value.ID
            Else
               Me._iAccountingUnitID = CType(Nothing, Nullable(Of Integer))
            End If
            Me.SendPropertyChanged("AccountingUnit")
         End If
      End Set
   End Property
   <Association(Name:="FK_tblItems_tblOrderItems", Storage:="_OrderItem", ThisKey:="OrderItemID", OtherKey:="ID", IsForeignKey:=True, DeleteOnNull:=True)> _
   Public Property OrderItem() As OrderItem
      Get
         Return Me._OrderItem.Entity
      End Get
      Set(ByVal value As OrderItem)
         Dim previousValue As OrderItem = Me._OrderItem.Entity
         If ((Object.Equals(previousValue, value) = False) _
            OrElse (Me._OrderItem.HasLoadedOrAssignedValue = False)) Then
            Me.SendPropertyChanging()
            If ((previousValue Is Nothing) _
               = False) Then
               Me._OrderItem.Entity = Nothing
               previousValue.Items.Remove(Me)
            End If
            Me._OrderItem.Entity = value
            If ((value Is Nothing) _
               = False) Then
               value.Items.Add(Me)
               Me._iOrderItemID = value.ID
            Else
               Me._iOrderItemID = CType(Nothing, Integer)
            End If
            Me.SendPropertyChanged("OrderItem")
         End If
      End Set
   End Property

   Public Property sDescription() As String
      Get
         Return OrderItem.Description
      End Get
      Set(ByVal value As String)
         OrderItem.Description = value
      End Set
   End Property
   Public Property sAccountingUnit() As String
      Get
         If AccountingUnit Is Nothing Then
            Return Nothing
         Else
            Return AccountingUnit.ShortID
         End If
      End Get
      Set(ByVal value As String)
         AccountingUnit.ShortID = value
      End Set
   End Property

   Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
   Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

   Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
   End Sub
   Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
   End Sub
End Class

<Table(Name:="dbo.tblOrderableItemOptions")>  _
Partial Public Class OrderableItemOptions
	
	Private _iOptionID As Integer
	Private _iItemID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_iOptionID", DbType:="Int NOT NULL")>  _
	Public Property iOptionID() As Integer
		Get
			Return Me._iOptionID
		End Get
		Set
			If ((Me._iOptionID = value)  _
						= false) Then
				Me._iOptionID = value
			End If
		End Set
	End Property	
	<Column(Storage:="_iItemID", DbType:="Int NOT NULL")>  _
	Public Property iItemID() As Integer
		Get
			Return Me._iItemID
		End Get
		Set
			If ((Me._iItemID = value)  _
						= false) Then
				Me._iItemID = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.tblOrderableItems")> _
Partial Public Class OrderableItem
   Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

   Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

   Private _ID As Integer
   Private _iOrder As System.Nullable(Of Integer)
   Private _bItemActive As Boolean
   Private _iReplacedByID As System.Nullable(Of Integer)
   Private _iItemClassID As Integer
   Private _iSupplierID As Integer
   Private _sDeviceCategory As String
   Private _sSupplierNo As String
   Private _cSupplierPrice As System.Nullable(Of Decimal)
   Private _sManufacturer As String
   Private _sManufacturerModel As String
   Private _sManufacturerNo As String
   Private _bItemVisibleToUser As Boolean
   Private _dEOL As System.Nullable(Of Date)
   Private _sUserfriendlyName As String
   Private _cUserfriendlyPrice As System.Nullable(Of Decimal)
   Private _sItemAvailInOrg As String
   Private _ConfirmedItem As EntitySet(Of ConfirmedItem)
   Private _ItemClass As EntityRef(Of ItemClass)
   Private _Supplier As EntityRef(Of Supplier)
   Private _OrderItem As EntitySet(Of OrderItem)

#Region "Extensibility Method Definitions"
   Partial Private Sub OnLoaded()
   End Sub
   Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
   End Sub
   Partial Private Sub OnCreated()
   End Sub
   Partial Private Sub OnIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OnIDChanged()
   End Sub
   Partial Private Sub OniOrderChanging(ByVal value As System.Nullable(Of Integer))
   End Sub
   Partial Private Sub OniOrderChanged()
   End Sub
   Partial Private Sub OnbItemActiveChanging(ByVal value As Boolean)
   End Sub
   Partial Private Sub OnbItemActiveChanged()
   End Sub
   Partial Private Sub OniReplacedByIDChanging(ByVal value As System.Nullable(Of Integer))
   End Sub
   Partial Private Sub OniReplacedByIDChanged()
   End Sub
   Partial Private Sub OniItemClassIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OniItemClassIDChanged()
   End Sub
   Partial Private Sub OniSupplierIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OniSupplierIDChanged()
   End Sub
   Partial Private Sub OnsDeviceCategoryChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsDeviceCategoryChanged()
   End Sub
   Partial Private Sub OnsSupplierNoChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsSupplierNoChanged()
   End Sub
   Partial Private Sub OncSupplierPriceChanging(ByVal value As System.Nullable(Of Decimal))
   End Sub
   Partial Private Sub OncSupplierPriceChanged()
   End Sub
   Partial Private Sub OnsManufacturerChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsManufacturerChanged()
   End Sub
   Partial Private Sub OnsManufacturerModelChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsManufacturerModelChanged()
   End Sub
   Partial Private Sub OnsManufacturerNoChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsManufacturerNoChanged()
   End Sub
   Partial Private Sub OnbItemVisibleToUserChanging(ByVal value As Boolean)
   End Sub
   Partial Private Sub OnbItemVisibleToUserChanged()
   End Sub
   Partial Private Sub OndEOLChanging(ByVal value As System.Nullable(Of Date))
   End Sub
   Partial Private Sub OndEOLChanged()
   End Sub
   Partial Private Sub OnsUserfriendlyNameChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsUserfriendlyNameChanged()
   End Sub
   Partial Private Sub OncUserfriendlyPriceChanging(ByVal value As System.Nullable(Of Decimal))
   End Sub
   Partial Private Sub OncUserfriendlyPriceChanged()
   End Sub
   Partial Private Sub OnsItemAvailInOrgChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsItemAvailInOrgChanged()
   End Sub
#End Region

   Public Sub New()
      MyBase.New()
      Me._ConfirmedItem = New EntitySet(Of ConfirmedItem)(AddressOf Me.attach_ConfirmedItem, AddressOf Me.detach_ConfirmedItem)
      Me._ItemClass = CType(Nothing, EntityRef(Of ItemClass))
      Me._Supplier = CType(Nothing, EntityRef(Of Supplier))
      Me._OrderItem = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItem, AddressOf Me.detach_OrderItem)
      OnCreated()
   End Sub

   <Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
   Public Property ID() As Integer
      Get
         Return Me._ID
      End Get
      Set(ByVal value As Integer)
         If ((Me._ID = Value) _
            = False) Then
            Me.OnIDChanging(Value)
            Me.SendPropertyChanging()
            Me._ID = Value
            Me.SendPropertyChanged("ID")
            Me.OnIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="iOrder", Storage:="_iOrder", DbType:="Int")> _
   Public Property Order() As System.Nullable(Of Integer)
      Get
         Return Me._iOrder
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
         If (Me._iOrder.Equals(value) = False) Then
            Me.OniOrderChanging(value)
            Me.SendPropertyChanging()
            Me._iOrder = value
            Me.SendPropertyChanged("iOrder")
            Me.OniOrderChanged()
         End If
      End Set
   End Property
   <Column(Name:="bItemActive", Storage:="_bItemActive", DbType:="Bit NOT NULL")> _
   Public Property ItemActive() As Boolean
      Get
         Return Me._bItemActive
      End Get
      Set(ByVal value As Boolean)
         If ((Me._bItemActive = value) _
            = False) Then
            Me.OnbItemActiveChanging(value)
            Me.SendPropertyChanging()
            Me._bItemActive = value
            Me.SendPropertyChanged("bItemActive")
            Me.OnbItemActiveChanged()
         End If
      End Set
   End Property
   <Column(Name:="iReplacedByID", Storage:="_iReplacedByID", DbType:="Int")> _
 Public Property ReplacedByID() As System.Nullable(Of Integer)
      Get
         Return Me._iReplacedByID
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
         If (Me._iReplacedByID.Equals(value) = False) Then
            Me.OniReplacedByIDChanging(value)
            Me.SendPropertyChanging()
            Me._iReplacedByID = value
            Me.SendPropertyChanged("iReplacedByID")
            Me.OniReplacedByIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="iItemClassID", Storage:="_iItemClassID", DbType:="Int NOT NULL")> _
   Public Property ItemClassID() As Integer
      Get
         Return Me._iItemClassID
      End Get
      Set(ByVal value As Integer)
         If ((Me._iItemClassID = value) _
            = False) Then
            If Me._ItemClass.HasLoadedOrAssignedValue Then
               Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
            End If
            Me.OniItemClassIDChanging(value)
            Me.SendPropertyChanging()
            Me._iItemClassID = value
            Me.SendPropertyChanged("iItemClassID")
            Me.OniItemClassIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="iSupplierID", Storage:="_iSupplierID", DbType:="Int NOT NULL")> _
 Public Property SupplierID() As Integer
      Get
         Return Me._iSupplierID
      End Get
      Set(ByVal value As Integer)
         If ((Me._iSupplierID = value) _
            = False) Then
            If Me._Supplier.HasLoadedOrAssignedValue Then
               Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
            End If
            Me.OniSupplierIDChanging(value)
            Me.SendPropertyChanging()
            Me._iSupplierID = value
            Me.SendPropertyChanged("iSupplierID")
            Me.OniSupplierIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sDeviceCategory", Storage:="_sDeviceCategory", DbType:="NVarChar(255)")> _
 Public Property DeviceCategory() As String
      Get
         Return Me._sDeviceCategory
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sDeviceCategory, value) = False) Then
            Me.OnsDeviceCategoryChanging(value)
            Me.SendPropertyChanging()
            Me._sDeviceCategory = value
            Me.SendPropertyChanged("sDeviceCategory")
            Me.OnsDeviceCategoryChanged()
         End If
      End Set
   End Property
   <Column(Name:="sSupplierNo", Storage:="_sSupplierNo", DbType:="NVarChar(255)")> _
   Public Property SupplierNo() As String
      Get
         Return Me._sSupplierNo
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sSupplierNo, value) = False) Then
            Me.OnsSupplierNoChanging(value)
            Me.SendPropertyChanging()
            Me._sSupplierNo = value
            Me.SendPropertyChanged("sSupplierNo")
            Me.OnsSupplierNoChanged()
         End If
      End Set
   End Property
   <Column(Name:="cSupplierPrice", Storage:="_cSupplierPrice", DbType:="Money")> _
   Public Property SupplierPrice() As System.Nullable(Of Decimal)
      Get
         Return Me._cSupplierPrice
      End Get
      Set(ByVal value As System.Nullable(Of Decimal))
         If (Me._cSupplierPrice.Equals(value) = False) Then
            Me.OncSupplierPriceChanging(value)
            Me.SendPropertyChanging()
            Me._cSupplierPrice = value
            Me.SendPropertyChanged("cSupplierPrice")
            Me.OncSupplierPriceChanged()
         End If
      End Set
   End Property
   <Column(Name:="sManufacturer", Storage:="_sManufacturer", DbType:="NVarChar(255)")> _
   Public Property Manufacturer() As String
      Get
         Return Me._sManufacturer
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sManufacturer, value) = False) Then
            Me.OnsManufacturerChanging(value)
            Me.SendPropertyChanging()
            Me._sManufacturer = value
            Me.SendPropertyChanged("sManufacturer")
            Me.OnsManufacturerChanged()
         End If
      End Set
   End Property
   <Column(Name:="sManufacturerModel", Storage:="_sManufacturerModel", DbType:="NVarChar(255)")> _
   Public Property ManufacturerModel() As String
      Get
         Return Me._sManufacturerModel
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sManufacturerModel, value) = False) Then
            Me.OnsManufacturerModelChanging(value)
            Me.SendPropertyChanging()
            Me._sManufacturerModel = value
            Me.SendPropertyChanged("sManufacturerModel")
            Me.OnsManufacturerModelChanged()
         End If
      End Set
   End Property
   <Column(Name:="sManufacturerNo", Storage:="_sManufacturerNo", DbType:="NVarChar(255)")> _
   Public Property ManufacturerNo() As String
      Get
         Return Me._sManufacturerNo
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sManufacturerNo, value) = False) Then
            Me.OnsManufacturerNoChanging(value)
            Me.SendPropertyChanging()
            Me._sManufacturerNo = value
            Me.SendPropertyChanged("sManufacturerNo")
            Me.OnsManufacturerNoChanged()
         End If
      End Set
   End Property
   <Column(Name:="bItemVisibleToUser", Storage:="_bItemVisibleToUser", DbType:="Bit NOT NULL")> _
   Public Property ItemVisibleToUser() As Boolean
      Get
         Return Me._bItemVisibleToUser
      End Get
      Set(ByVal value As Boolean)
         If ((Me._bItemVisibleToUser = value) _
            = False) Then
            Me.OnbItemVisibleToUserChanging(value)
            Me.SendPropertyChanging()
            Me._bItemVisibleToUser = value
            Me.SendPropertyChanged("bItemVisibleToUser")
            Me.OnbItemVisibleToUserChanged()
         End If
      End Set
   End Property
   <Column(Name:="dEOL", Storage:="_dEOL", DbType:="DateTime")> _
   Public Property EOL() As System.Nullable(Of Date)
      Get
         Return Me._dEOL
      End Get
      Set(ByVal value As System.Nullable(Of Date))
         If (Me._dEOL.Equals(value) = False) Then
            Me.OndEOLChanging(value)
            Me.SendPropertyChanging()
            Me._dEOL = value
            Me.SendPropertyChanged("dEOL")
            Me.OndEOLChanged()
         End If
      End Set
   End Property
   <Column(Name:="sUserfriendlyName", Storage:="_sUserfriendlyName", DbType:="NVarChar(255)")> _
   Public Property UserfriendlyName() As String
      Get
         Return Me._sUserfriendlyName
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sUserfriendlyName, value) = False) Then
            Me.OnsUserfriendlyNameChanging(value)
            Me.SendPropertyChanging()
            Me._sUserfriendlyName = value
            Me.SendPropertyChanged("sUserfriendlyName")
            Me.OnsUserfriendlyNameChanged()
         End If
      End Set
   End Property
   <Column(Name:="cUserFriendlyPrice", Storage:="_cUserfriendlyPrice", DbType:="Money")> _
   Public Property UserfriendlyPrice() As System.Nullable(Of Decimal)
      Get
         Return Me._cUserfriendlyPrice
      End Get
      Set(ByVal value As System.Nullable(Of Decimal))
         If (Me._cUserfriendlyPrice.Equals(value) = False) Then
            Me.OncUserfriendlyPriceChanging(value)
            Me.SendPropertyChanging()
            Me._cUserfriendlyPrice = value
            Me.SendPropertyChanged("cUserfriendlyPrice")
            Me.OncUserfriendlyPriceChanged()
         End If
      End Set
   End Property
   <Column(Name:="sItemAvailInOrg", Storage:="_sItemAvailInOrg", DbType:="NVarChar(255)")> _
 Public Property ItemAvailInOrg() As String
      Get
         Return Me._sItemAvailInOrg
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sItemAvailInOrg, value) = False) Then
            Me.OnsItemAvailInOrgChanging(value)
            Me.SendPropertyChanging()
            Me._sItemAvailInOrg = value
            Me.SendPropertyChanged("sItemAvailInOrg")
            Me.OnsItemAvailInOrgChanged()
         End If
      End Set
   End Property

   <Association(Name:="FK_tblConfirmedItems_tblOrderableItems", Storage:="_ConfirmedItem", ThisKey:="ID", OtherKey:="OrderableItemsID", DeleteRule:="NO ACTION")> _
   Public Property ConfirmedItem() As EntitySet(Of ConfirmedItem)
      Get
         Return Me._ConfirmedItem
      End Get
      Set(ByVal value As EntitySet(Of ConfirmedItem))
         Me._ConfirmedItem.Assign(value)
      End Set
   End Property
   <Association(Name:="FK_tblOrderableItems_tblItemClass", Storage:="_ItemClass", ThisKey:="ItemClassID", OtherKey:="ID", IsForeignKey:=True)> _
   Public Property ItemClass() As ItemClass
      Get
         Return Me._ItemClass.Entity
      End Get
      Set(ByVal value As ItemClass)
         Dim previousValue As ItemClass = Me._ItemClass.Entity
         If ((Object.Equals(previousValue, value) = False) _
            OrElse (Me._ItemClass.HasLoadedOrAssignedValue = False)) Then
            Me.SendPropertyChanging()
            If ((previousValue Is Nothing) _
               = False) Then
               Me._ItemClass.Entity = Nothing
               previousValue.OrderableItem.Remove(Me)
            End If
            Me._ItemClass.Entity = value
            If ((value Is Nothing) _
               = False) Then
               value.OrderableItem.Add(Me)
               Me._iItemClassID = value.ID
            Else
               Me._iItemClassID = CType(Nothing, Integer)
            End If
            Me.SendPropertyChanged("ItemClass")
         End If
      End Set
   End Property
   <Association(Name:="FK_tblOrderableItems_tblSuppliers", Storage:="_Supplier", ThisKey:="SupplierID", OtherKey:="ID", IsForeignKey:=True)> _
   Public Property Supplier() As Supplier
      Get
         Return Me._Supplier.Entity
      End Get
      Set(ByVal value As Supplier)
         Dim previousValue As Supplier = Me._Supplier.Entity
         If ((Object.Equals(previousValue, value) = False) _
            OrElse (Me._Supplier.HasLoadedOrAssignedValue = False)) Then
            Me.SendPropertyChanging()
            If ((previousValue Is Nothing) _
               = False) Then
               Me._Supplier.Entity = Nothing
               previousValue.OrderableItem.Remove(Me)
            End If
            Me._Supplier.Entity = value
            If ((value Is Nothing) _
               = False) Then
               value.OrderableItem.Add(Me)
               Me._iSupplierID = value.ID
            Else
               Me._iSupplierID = CType(Nothing, Integer)
            End If
            Me.SendPropertyChanged("Supplier")
         End If
      End Set
   End Property
   <Association(Name:="FK_tblOrderItems_tblOrderableItems", Storage:="_OrderItem", ThisKey:="ID", OtherKey:="OrderableItemsID", DeleteRule:="NO ACTION")> _
   Public Property OrderItem() As EntitySet(Of OrderItem)
      Get
         Return Me._OrderItem
      End Get
      Set(ByVal value As EntitySet(Of OrderItem))
         Me._OrderItem.Assign(value)
      End Set
   End Property

   Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
   Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

   Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
   End Sub
   Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
   End Sub

   Private Sub attach_ConfirmedItem(ByVal entity As ConfirmedItem)
      Me.SendPropertyChanging()
      entity.OrderableItem = Me
   End Sub
   Private Sub detach_ConfirmedItem(ByVal entity As ConfirmedItem)
      Me.SendPropertyChanging()
      entity.OrderableItem = Nothing
   End Sub
   Private Sub attach_OrderItem(ByVal entity As OrderItem)
      Me.SendPropertyChanging()
      entity.OrderableItem = Me
   End Sub
   Private Sub detach_OrderItem(ByVal entity As OrderItem)
      Me.SendPropertyChanging()
      entity.OrderableItem = Nothing
   End Sub
End Class
Public Class OrderableItemPredicate
   Private _ID As Integer
   Private _ManufacturerModel As String

   Public Sub New(ByVal ID As Integer)
      _ID = ID
   End Sub
   Public Sub New(ByVal ManufacturerModel As String)
      _ManufacturerModel = ManufacturerModel
   End Sub

   Public Function CompareIDs(ByVal obj As OrderableItem) As Boolean
      Return (_ID = obj.ID)
   End Function
   Public Function CompareManufacturerModel(ByVal obj As OrderableItem) As Boolean
      Return (_ManufacturerModel = obj.ManufacturerModel)
   End Function
End Class

<Table(Name:="dbo.tblOrderers")> _
Partial Public Class Orderer
   Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

   Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

   Private _ID As Integer
   Private _sName As String
   Private _sEMailAddress As String
   Private _Order As EntitySet(Of Order)

#Region "Extensibility Method Definitions"
   Partial Private Sub OnLoaded()
   End Sub
   Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
   End Sub
   Partial Private Sub OnCreated()
   End Sub
   Partial Private Sub OnIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OnIDChanged()
   End Sub
   Partial Private Sub OnsNameChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsNameChanged()
   End Sub
   Partial Private Sub OnsEMailAddressChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsEMailAddressChanged()
   End Sub
#End Region

   Public Sub New()
      MyBase.New()
      Me._Order = New EntitySet(Of Order)(AddressOf Me.attach_Order, AddressOf Me.detach_Order)
      OnCreated()
   End Sub

   <Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
   Public Property ID() As Integer
      Get
         Return Me._ID
      End Get
      Set(ByVal value As Integer)
         If ((Me._ID = Value) _
            = False) Then
            Me.OnIDChanging(Value)
            Me.SendPropertyChanging()
            Me._ID = Value
            Me.SendPropertyChanged("ID")
            Me.OnIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sName", Storage:="_sName", DbType:="NVarChar(63) NOT NULL", CanBeNull:=False)> _
   Public Property Name() As String
      Get
         Return Me._sName
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sName, value) = False) Then
            Me.OnsNameChanging(value)
            Me.SendPropertyChanging()
            Me._sName = value
            Me.SendPropertyChanged("sName")
            Me.OnsNameChanged()
         End If
      End Set
   End Property
   <Column(Name:="sEMailAddress", Storage:="_sEMailAddress", DbType:="NVarChar(63) NOT NULL", CanBeNull:=False)> _
   Public Property EMailAddress() As String
      Get
         Return Me._sEMailAddress
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sEMailAddress, value) = False) Then
            Me.OnsEMailAddressChanging(value)
            Me.SendPropertyChanging()
            Me._sEMailAddress = value
            Me.SendPropertyChanged("sEMailAddress")
            Me.OnsEMailAddressChanged()
         End If
      End Set
   End Property

   <Association(Name:="FK_tblOrders_tblOrderers", Storage:="_Order", ThisKey:="ID", OtherKey:="OrdererID", DeleteRule:="NO ACTION")> _
   Public Property Order() As EntitySet(Of Order)
      Get
         Return Me._Order
      End Get
      Set(ByVal value As EntitySet(Of Order))
         Me._Order.Assign(value)
      End Set
   End Property

   Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
   Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

   Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
   End Sub
   Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
   End Sub

   Private Sub attach_Order(ByVal entity As Order)
      Me.SendPropertyChanging()
      entity.Orderer = Me
   End Sub
   Private Sub detach_Order(ByVal entity As Order)
      Me.SendPropertyChanging()
      entity.Orderer = Nothing
   End Sub
   Public ReadOnly Property TreeNode() As TreeNode
      Get
         Dim nd As New TreeNode(Name)
         nd.Tag = ID
         nd.Name = Name
         nd.ImageKey = "Orderer"
         nd.SelectedImageKey = nd.ImageKey
         Return nd
      End Get
   End Property
End Class
Public Class OrdererPredicate
   Private _ID As Integer
   Private _Name As String

   Public Sub New(ByVal ID As Integer)
      _ID = ID
   End Sub
   Public Sub New(ByVal Name As String)
      _Name = Name
   End Sub

   Public Function CompareIDs(ByVal obj As Orderer) As Boolean
      Return (_ID = obj.ID)
   End Function
   Public Function CompareName(ByVal obj As Orderer) As Boolean
      Return (_Name = obj.Name)
   End Function
End Class

<Table(Name:="dbo.tblOrderItems")> _
Partial Public Class OrderItem
   Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

   Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

   Private _ID As Integer
   Private _iOrderID As Integer
   Private _sDescription As String
   Private _iItemClassID As Integer
   Private _iNrOrdered As System.Nullable(Of Integer)
   Private _iNrDelivered As System.Nullable(Of Integer)
   Private _dCompletionDate As System.Nullable(Of Date)
   Private _iOrderableItemsID As System.Nullable(Of Integer)
   Private _Items As EntitySet(Of Item)
   Private _ItemClass As EntityRef(Of ItemClass)
   Private _OrderableItem As EntityRef(Of OrderableItem)
   Private _Order As EntityRef(Of Order)

#Region "Extensibility Method Definitions"
   Partial Private Sub OnLoaded()
   End Sub
   Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
   End Sub
   Partial Private Sub OnCreated()
   End Sub
   Partial Private Sub OnIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OnIDChanged()
   End Sub
   Partial Private Sub OniOrderIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OniOrderIDChanged()
   End Sub
   Partial Private Sub OnsDescriptionChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsDescriptionChanged()
   End Sub
   Partial Private Sub OniItemClassIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OniItemClassIDChanged()
   End Sub
   Partial Private Sub OniNrOrderedChanging(ByVal value As System.Nullable(Of Integer))
   End Sub
   Partial Private Sub OniNrOrderedChanged()
   End Sub
   Partial Private Sub OniNrDeliveredChanging(ByVal value As System.Nullable(Of Integer))
   End Sub
   Partial Private Sub OniNrDeliveredChanged()
   End Sub
   Partial Private Sub OndCompletionDateChanging(ByVal value As System.Nullable(Of Date))
   End Sub
   Partial Private Sub OndCompletionDateChanged()
   End Sub
   Partial Private Sub OniOrderableItemsIDChanging(ByVal value As System.Nullable(Of Integer))
   End Sub
   Partial Private Sub OniOrderableItemsIDChanged()
   End Sub
#End Region

   Public Sub New()
      MyBase.New()
      Me._Items = New EntitySet(Of Item)(AddressOf Me.attach_Item, AddressOf Me.detach_Item)
      Me._ItemClass = CType(Nothing, EntityRef(Of ItemClass))
      Me._OrderableItem = CType(Nothing, EntityRef(Of OrderableItem))
      Me._Order = CType(Nothing, EntityRef(Of Order))
      OnCreated()
   End Sub

   <Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
   Public Property ID() As Integer
      Get
         Return Me._ID
      End Get
      Set(ByVal value As Integer)
         If ((Me._ID = Value) _
            = False) Then
            Me.OnIDChanging(Value)
            Me.SendPropertyChanging()
            Me._ID = Value
            Me.SendPropertyChanged("ID")
            Me.OnIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="iOrderID", Storage:="_iOrderID", DbType:="Int NOT NULL")> _
 Public Property OrderID() As Integer
      Get
         Return Me._iOrderID
      End Get
      Set(ByVal value As Integer)
         If ((Me._iOrderID = value) _
            = False) Then
            If Me._Order.HasLoadedOrAssignedValue Then
               Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
            End If
            Me.OniOrderIDChanging(value)
            Me.SendPropertyChanging()
            Me._iOrderID = value
            Me.SendPropertyChanged("iOrderID")
            Me.OniOrderIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sDescription", Storage:="_sDescription", DbType:="NVarChar(255)")> _
   Public Property Description() As String
      Get
         Return Me._sDescription
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sDescription, value) = False) Then
            Me.OnsDescriptionChanging(value)
            Me.SendPropertyChanging()
            Me._sDescription = value
            Me.SendPropertyChanged("sDescription")
            Me.OnsDescriptionChanged()
         End If
      End Set
   End Property
   <Column(Name:="iItemClassID", Storage:="_iItemClassID", DbType:="Int NOT NULL")> _
   Public Property ItemClassID() As Integer
      Get
         Return Me._iItemClassID
      End Get
      Set(ByVal value As Integer)
         If ((Me._iItemClassID = value) _
            = False) Then
            If Me._ItemClass.HasLoadedOrAssignedValue Then
               Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
            End If
            Me.OniItemClassIDChanging(value)
            Me.SendPropertyChanging()
            Me._iItemClassID = value
            Me.SendPropertyChanged("iItemClassID")
            Me.OniItemClassIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="iNrOrdered", Storage:="_iNrOrdered", DbType:="Int")> _
   Public Property NrOrdered() As System.Nullable(Of Integer)
      Get
         Return Me._iNrOrdered
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
         If (Me._iNrOrdered.Equals(value) = False) Then
            Me.OniNrOrderedChanging(value)
            Me.SendPropertyChanging()
            Me._iNrOrdered = value
            Me.SendPropertyChanged("iNrOrdered")
            Me.OniNrOrderedChanged()
         End If
      End Set
   End Property
   <Column(Name:="iNrDelivered", Storage:="_iNrDelivered", DbType:="Int")> _
   Public Property NrDelivered() As System.Nullable(Of Integer)
      Get
         Return Me._iNrDelivered
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
         If (Me._iNrDelivered.Equals(value) = False) Then
            Me.OniNrDeliveredChanging(value)
            Me.SendPropertyChanging()
            Me._iNrDelivered = value
            Me.SendPropertyChanged("iNrDelivered")
            Me.OniNrDeliveredChanged()
         End If
      End Set
   End Property
   <Column(Name:="dCompletionDate", Storage:="_dCompletionDate", DbType:="DateTime")> _
   Public Property CompletionDate() As System.Nullable(Of Date)
      Get
         Return Me._dCompletionDate
      End Get
      Set(ByVal value As System.Nullable(Of Date))
         If (Me._dCompletionDate.Equals(value) = False) Then
            Me.OndCompletionDateChanging(value)
            Me.SendPropertyChanging()
            Me._dCompletionDate = value
            Me.SendPropertyChanged("dCompletionDate")
            Me.OndCompletionDateChanged()
         End If
      End Set
   End Property
   <Column(Name:="iOrderableItemsID", Storage:="_iOrderableItemsID", DbType:="Int")> _
   Public Property OrderableItemsID() As System.Nullable(Of Integer)
      Get
         Return Me._iOrderableItemsID
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
         If (Me._iOrderableItemsID.Equals(value) = False) Then
            If Me._OrderableItem.HasLoadedOrAssignedValue Then
               Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
            End If
            Me.OniOrderableItemsIDChanging(value)
            Me.SendPropertyChanging()
            Me._iOrderableItemsID = value
            Me.SendPropertyChanged("iOrderableItemsID")
            Me.OniOrderableItemsIDChanged()
         End If
      End Set
   End Property

   <Association(Name:="FK_tblItems_tblOrderItems", Storage:="_Items", ThisKey:="ID", OtherKey:="OrderItemID", DeleteRule:="CASCADE")> _
   Public Property Items() As EntitySet(Of Item)
      Get
         Return Me._Items
      End Get
      Set(ByVal value As EntitySet(Of Item))
         Me._Items.Assign(value)
      End Set
   End Property
   <Association(Name:="FK_tblOrderItems_tblItemClass", Storage:="_ItemClass", ThisKey:="ItemClassID", OtherKey:="ID", IsForeignKey:=True, DeleteOnNull:=True)> _
   Public Property ItemClass() As ItemClass
      Get
         Return Me._ItemClass.Entity
      End Get
      Set(ByVal value As ItemClass)
         Dim previousValue As ItemClass = Me._ItemClass.Entity
         If ((Object.Equals(previousValue, value) = False) _
            OrElse (Me._ItemClass.HasLoadedOrAssignedValue = False)) Then
            Me.SendPropertyChanging()
            If ((previousValue Is Nothing) _
               = False) Then
               Me._ItemClass.Entity = Nothing
               previousValue.OrderItem.Remove(Me)
            End If
            Me._ItemClass.Entity = value
            If ((value Is Nothing) _
               = False) Then
               value.OrderItem.Add(Me)
               Me._iItemClassID = value.ID
            Else
               Me._iItemClassID = CType(Nothing, Integer)
            End If
            Me.SendPropertyChanged("ItemClass")
         End If
      End Set
   End Property
   <Association(Name:="FK_tblOrderItems_tblOrderableItems", Storage:="_OrderableItem", ThisKey:="OrderableItemsID", OtherKey:="ID", IsForeignKey:=True)> _
   Public Property OrderableItem() As OrderableItem
      Get
         Return Me._OrderableItem.Entity
      End Get
      Set(ByVal value As OrderableItem)
         Dim previousValue As OrderableItem = Me._OrderableItem.Entity
         If ((Object.Equals(previousValue, value) = False) _
            OrElse (Me._OrderableItem.HasLoadedOrAssignedValue = False)) Then
            Me.SendPropertyChanging()
            If ((previousValue Is Nothing) _
               = False) Then
               Me._OrderableItem.Entity = Nothing
               previousValue.OrderItem.Remove(Me)
            End If
            Me._OrderableItem.Entity = value
            If ((value Is Nothing) _
               = False) Then
               value.OrderItem.Add(Me)
               Me._iOrderableItemsID = value.ID
            Else
               Me._iOrderableItemsID = CType(Nothing, Nullable(Of Integer))
            End If
            Me.SendPropertyChanged("OrderableItem")
         End If
      End Set
   End Property
   <Association(Name:="FK_tblOrderItems_tblOrders", Storage:="_Order", ThisKey:="OrderID", OtherKey:="ID", IsForeignKey:=True, DeleteOnNull:=True)> _
 Public Property Order() As Order
      Get
         Return Me._Order.Entity
      End Get
      Set(ByVal value As Order)
         Dim previousValue As Order = Me._Order.Entity
         If ((Object.Equals(previousValue, value) = False) _
            OrElse (Me._Order.HasLoadedOrAssignedValue = False)) Then
            Me.SendPropertyChanging()
            If ((previousValue Is Nothing) _
               = False) Then
               Me._Order.Entity = Nothing
               previousValue.OrderItems.Remove(Me)
            End If
            Me._Order.Entity = value
            If ((value Is Nothing) _
               = False) Then
               value.OrderItems.Add(Me)
               Me._iOrderID = value.ID
            Else
               Me._iOrderID = CType(Nothing, Integer)
            End If
            Me.SendPropertyChanged("Order")
         End If
      End Set
   End Property

   Public Property sItemClass() As String
      Get
         Return ItemClass.ShortID
      End Get
      Set(ByVal value As String)
         ItemClass.ShortID = value
      End Set
   End Property

   Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
   Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

   Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
   End Sub
   Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
   End Sub

   Private Sub attach_Item(ByVal entity As Item)
      Me.SendPropertyChanging()
      entity.OrderItem = Me
   End Sub
   Private Sub detach_Item(ByVal entity As Item)
      Me.SendPropertyChanging()
      entity.OrderItem = Nothing
   End Sub
   Public ReadOnly Property TreeNode() As TreeNode
      Get
         Dim nd As New TreeNode(Description)
         If ItemClassID = 2 Then
            If NrDelivered = 0 Then
               nd.ImageKey = "HW_red"
            ElseIf NrDelivered = NrOrdered Then
               nd.ImageKey = "HWgreen"
            Else
               nd.ImageKey = "HW_yellow"
            End If
         ElseIf ItemClassID = 3 Then
            If NrDelivered = 0 Then
               nd.ImageKey = "SW_red"
            ElseIf NrDelivered = NrOrdered Then
               nd.ImageKey = "SW_green"
            Else
               nd.ImageKey = "SW_yellow"
            End If
         ElseIf ItemClassID = 4 Then
            If NrDelivered = 0 Then
               nd.ImageKey = "NonIT_red"
            ElseIf NrDelivered = NrOrdered Then
               nd.ImageKey = "NonIT_green"
            Else
               nd.ImageKey = "NonIT_yellow"
            End If
         End If
         nd.SelectedImageKey = nd.ImageKey
         nd.Tag = ID
         Return nd
      End Get
   End Property
End Class
Public Class OrderItemPredicate
   Private _ID As Integer
   Private _Description As String

   Public Sub New(ByVal ID As Integer)
      _ID = ID
   End Sub
   Public Sub New(ByVal Description As String)
      _Description = Description
   End Sub

   Public Function CompareIDs(ByVal obj As OrderItem) As Boolean
      Return (_ID = obj.ID)
   End Function
   Public Function CompareDescription(ByVal obj As OrderItem) As Boolean
      Return (_Description = obj.Description)
   End Function
End Class

<Table(Name:="dbo.tblOrders")> _
Partial Public Class Order
   Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

   Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

   Private _ID As Integer
   Private _sNr As String
   Private _dOrderDate As System.Nullable(Of Date)
   Private _iOrdererID As Integer
   Private _iSupplierID As System.Nullable(Of Integer)
   Private _sRemarks As String
   Private _bEProc As Boolean
   Private _sEProcOrderNr As String
   Private _bFinalized As Boolean
   Private _OrderItems As EntitySet(Of OrderItem)
   Private _Orderer As EntityRef(Of Orderer)
   Private _Supplier As EntityRef(Of Supplier)

#Region "Extensibility Method Definitions"
   Partial Private Sub OnLoaded()
   End Sub
   Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
   End Sub
   Partial Private Sub OnCreated()
   End Sub
   Partial Private Sub OnIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OnIDChanged()
   End Sub
   Partial Private Sub OnsNrChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsNrChanged()
   End Sub
   Partial Private Sub OndOrderDateChanging(ByVal value As System.Nullable(Of Date))
   End Sub
   Partial Private Sub OndOrderDateChanged()
   End Sub
   Partial Private Sub OniOrdererIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OniOrdererIDChanged()
   End Sub
   Partial Private Sub OniSupplierIDChanging(ByVal value As System.Nullable(Of Integer))
   End Sub
   Partial Private Sub OniSupplierIDChanged()
   End Sub
   Partial Private Sub OnsRemarksChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsRemarksChanged()
   End Sub
   Partial Private Sub OnbEProcChanging(ByVal value As Boolean)
   End Sub
   Partial Private Sub OnbEProcChanged()
   End Sub
   Partial Private Sub OnsEProcOrderNrChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsEProcOrderNrChanged()
   End Sub
   Partial Private Sub OnbFinalizedChanging(ByVal value As Boolean)
   End Sub
   Partial Private Sub OnbFinalizedChanged()
   End Sub
#End Region

   Public Sub New()
      MyBase.New()
      Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItem, AddressOf Me.detach_OrderItem)
      Me._Orderer = CType(Nothing, EntityRef(Of Orderer))
      Me._Supplier = CType(Nothing, EntityRef(Of Supplier))
      OnCreated()
   End Sub

   <Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
   Public Property ID() As Integer
      Get
         Return Me._ID
      End Get
      Set(ByVal value As Integer)
         If ((Me._ID = Value) _
            = False) Then
            Me.OnIDChanging(Value)
            Me.SendPropertyChanging()
            Me._ID = Value
            Me.SendPropertyChanged("ID")
            Me.OnIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sNr", Storage:="_sNr", DbType:="NVarChar(63)")> _
   Public Property Nr() As String
      Get
         Return Me._sNr
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sNr, value) = False) Then
            Me.OnsNrChanging(value)
            Me.SendPropertyChanging()
            Me._sNr = value
            Me.SendPropertyChanged("sNr")
            Me.OnsNrChanged()
         End If
      End Set
   End Property
   <Column(Name:="dOrderDate", Storage:="_dOrderDate", DbType:="DateTime")> _
 Public Property OrderDate() As System.Nullable(Of Date)
      Get
         Return Me._dOrderDate
      End Get
      Set(ByVal value As System.Nullable(Of Date))
         If (Me._dOrderDate.Equals(value) = False) Then
            Me.OndOrderDateChanging(value)
            Me.SendPropertyChanging()
            Me._dOrderDate = value
            Me.SendPropertyChanged("dOrderDate")
            Me.OndOrderDateChanged()
         End If
      End Set
   End Property
   <Column(Name:="iOrdererID", Storage:="_iOrdererID", DbType:="Int NOT NULL")> _
   Public Property OrdererID() As Integer
      Get
         Return Me._iOrdererID
      End Get
      Set(ByVal value As Integer)
         If ((Me._iOrdererID = value) = False) Then
            If Me._Orderer.HasLoadedOrAssignedValue Then
               Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
            End If
            Me.OniOrdererIDChanging(value)
            Me.SendPropertyChanging()
            Me._iOrdererID = value
            Me.SendPropertyChanged("iOrdererID")
            Me.OniOrdererIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="iSupplierID", Storage:="_iSupplierID", DbType:="Int")> _
 Public Property SupplierID() As System.Nullable(Of Integer)
      Get
         Return Me._iSupplierID
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
         If (Me._iSupplierID.Equals(value) = False) Then
            If Me._Supplier.HasLoadedOrAssignedValue Then
               Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
            End If
            Me.OniSupplierIDChanging(value)
            Me.SendPropertyChanging()
            Me._iSupplierID = value
            Me.SendPropertyChanged("iSupplierID")
            Me.OniSupplierIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sRemarks", Storage:="_sRemarks", DbType:="NVarChar(255)")> _
   Public Property Remarks() As String
      Get
         Return Me._sRemarks
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sRemarks, value) = False) Then
            Me.OnsRemarksChanging(value)
            Me.SendPropertyChanging()
            Me._sRemarks = value
            Me.SendPropertyChanged("sRemarks")
            Me.OnsRemarksChanged()
         End If
      End Set
   End Property
   <Column(Name:="bEProc", Storage:="_bEProc", DbType:="Bit NOT NULL")> _
   Public Property EProc() As Boolean
      Get
         Return Me._bEProc
      End Get
      Set(ByVal value As Boolean)
         If ((Me._bEProc = value) _
            = False) Then
            Me.OnbEProcChanging(value)
            Me.SendPropertyChanging()
            Me._bEProc = value
            Me.SendPropertyChanged("bEProc")
            Me.OnbEProcChanged()
         End If
      End Set
   End Property
   <Column(Name:="sEProcOrderNr", Storage:="_sEProcOrderNr", DbType:="NVarChar(50)")> _
   Public Property EProcOrderNr() As String
      Get
         Return Me._sEProcOrderNr
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sEProcOrderNr, value) = False) Then
            Me.OnsEProcOrderNrChanging(value)
            Me.SendPropertyChanging()
            Me._sEProcOrderNr = value
            Me.SendPropertyChanged("sEProcOrderNr")
            Me.OnsEProcOrderNrChanged()
         End If
      End Set
   End Property
   <Column(Name:="bFinalized", Storage:="_bFinalized", DbType:="Bit NOT NULL")> _
   Public Property Finalized() As Boolean
      Get
         Return Me._bFinalized
      End Get
      Set(ByVal value As Boolean)
         If ((Me._bFinalized = value) _
            = False) Then
            Me.OnbFinalizedChanging(value)
            Me.SendPropertyChanging()
            Me._bFinalized = value
            Me.SendPropertyChanged("bFinalized")
            Me.OnbFinalizedChanged()
         End If
      End Set
   End Property

   <Association(Name:="FK_tblOrderItems_tblOrders", Storage:="_OrderItems", ThisKey:="ID", OtherKey:="OrderID", DeleteRule:="CASCADE")> _
   Public Property OrderItems() As EntitySet(Of OrderItem)
      Get
         Return Me._OrderItems
      End Get
      Set(ByVal value As EntitySet(Of OrderItem))
         Me._OrderItems.Assign(value)
      End Set
   End Property
   <Association(Name:="FK_tblOrders_tblOrderers", Storage:="_Orderer", ThisKey:="OrdererID", OtherKey:="ID", IsForeignKey:=True)> _
   Public Property Orderer() As Orderer
      Get
         Return Me._Orderer.Entity
      End Get
      Set(ByVal value As Orderer)
         Dim previousValue As Orderer = Me._Orderer.Entity
         If ((Object.Equals(previousValue, value) = False) _
            OrElse (Me._Orderer.HasLoadedOrAssignedValue = False)) Then
            Me.SendPropertyChanging()
            If ((previousValue Is Nothing) _
               = False) Then
               Me._Orderer.Entity = Nothing
               previousValue.Order.Remove(Me)
            End If
            Me._Orderer.Entity = value
            If ((value Is Nothing) _
               = False) Then
               value.Order.Add(Me)
               Me._iOrdererID = value.ID
            Else
               Me._iOrdererID = CType(Nothing, Integer)
            End If
            Me.SendPropertyChanged("Orderer")
         End If
      End Set
   End Property
   <Association(Name:="FK_tblOrders_tblSuppliers", Storage:="_Supplier", ThisKey:="SupplierID", OtherKey:="ID", IsForeignKey:=True)> _
   Public Property Supplier() As Supplier
      Get
         Return Me._Supplier.Entity
      End Get
      Set(ByVal value As Supplier)
         Dim previousValue As Supplier = Me._Supplier.Entity
         If ((Object.Equals(previousValue, value) = False) _
            OrElse (Me._Supplier.HasLoadedOrAssignedValue = False)) Then
            Me.SendPropertyChanging()
            If ((previousValue Is Nothing) _
               = False) Then
               Me._Supplier.Entity = Nothing
               previousValue.Order.Remove(Me)
            End If
            Me._Supplier.Entity = value
            If ((value Is Nothing) _
               = False) Then
               value.Order.Add(Me)
               Me._iSupplierID = value.ID
            Else
               Me._iSupplierID = CType(Nothing, Nullable(Of Integer))
            End If
            Me.SendPropertyChanged("Supplier")
         End If
      End Set
   End Property

   Public Property sOrderer() As String
      Get
         Return Orderer.Name
      End Get
      Set(ByVal value As String)
         Orderer.Name = value
      End Set
   End Property
   Public Property sSupplier() As String
      Get
         Return Supplier.ShortID
      End Get
      Set(ByVal value As String)
         Supplier.ShortID = value
      End Set
   End Property

   Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
   Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

   Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
   End Sub
   Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
   End Sub

   Private Sub attach_OrderItem(ByVal entity As OrderItem)
      Me.SendPropertyChanging()
      entity.Order = Me
   End Sub
   Private Sub detach_OrderItem(ByVal entity As OrderItem)
      Me.SendPropertyChanging()
      entity.Order = Nothing
   End Sub
   Public ReadOnly Property TreeNode() As TreeNode
      Get
         Dim nd As New TreeNode(Nr)
         Dim sumOrdered As Integer = 0
         Dim sumDelivered As Integer = 0
         For Each oi As OrderItem In OrderItems
            sumOrdered = sumOrdered + CInt(oi.NrOrdered)
            If oi.NrDelivered.HasValue Then
               sumDelivered = sumDelivered + CInt(oi.NrDelivered)
            End If
         Next
         If Finalized Then
            If sumOrdered = 0 Then
               nd.ImageKey = "Ordery-"
            ElseIf sumOrdered = sumDelivered Then
               nd.ImageKey = "Orderyy"
            Else
               nd.ImageKey = "Orderyn"
            End If
         Else
            If sumOrdered = 0 Then
               nd.ImageKey = "Order--"
            Else
               nd.ImageKey = "Ordern-"
            End If
         End If
         nd.SelectedImageKey = nd.ImageKey
         nd.Tag = ID
         nd.Name = Nr
         Return nd
      End Get
   End Property
End Class
Public Class OrderPredicate
   Private _ID As Integer
   Private _Nr As String

   Public Sub New(ByVal ID As Integer)
      _ID = ID
   End Sub
   Public Sub New(ByVal Nr As String)
      _Nr = Nr
   End Sub

   Public Function CompareIDs(ByVal obj As Order) As Boolean
      Return (_ID = obj.ID)
   End Function
   Public Function CompareNr(ByVal obj As Order) As Boolean
      Return (_Nr = obj.Nr)
   End Function
End Class

<Table(Name:="dbo.tblSuppliers")> _
Partial Public Class Supplier
   Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

   Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

   Private _ID As Integer
   Private _sShortID As String
   Private _sDescription As String
   Private _sAddress As String
   Private _sMailAddress As String
   Private _sMainCatKeywords As String
   Private _iMainCatID As System.Nullable(Of Integer)
   Private _iElseCatID As System.Nullable(Of Integer)
   Private _sOptionKeywords As String
   Private _OrderableItem As EntitySet(Of OrderableItem)
   Private _Order As EntitySet(Of Order)

#Region "Extensibility Method Definitions"
   Partial Private Sub OnLoaded()
   End Sub
   Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
   End Sub
   Partial Private Sub OnCreated()
   End Sub
   Partial Private Sub OnIDChanging(ByVal value As Integer)
   End Sub
   Partial Private Sub OnIDChanged()
   End Sub
   Partial Private Sub OnsShortIDChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsShortIDChanged()
   End Sub
   Partial Private Sub OnsDescriptionChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsDescriptionChanged()
   End Sub
   Partial Private Sub OnsAddressChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsAddressChanged()
   End Sub
   Partial Private Sub OnsMailAddressChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsMailAddressChanged()
   End Sub
   Partial Private Sub OnsMainCatKeywordsChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsMainCatKeywordsChanged()
   End Sub
   Partial Private Sub OniMainCatIDChanging(ByVal value As System.Nullable(Of Integer))
   End Sub
   Partial Private Sub OniMainCatIDChanged()
   End Sub
   Partial Private Sub OniElseCatIDChanging(ByVal value As System.Nullable(Of Integer))
   End Sub
   Partial Private Sub OniElseCatIDChanged()
   End Sub
   Partial Private Sub OnsOptionKeywordsChanging(ByVal value As String)
   End Sub
   Partial Private Sub OnsOptionKeywordsChanged()
   End Sub
#End Region

   Public Sub New()
      MyBase.New()
      Me._OrderableItem = New EntitySet(Of OrderableItem)(AddressOf Me.attach_OrderableItem, AddressOf Me.detach_OrderableItem)
      Me._Order = New EntitySet(Of Order)(AddressOf Me.attach_Order, AddressOf Me.detach_Order)
      OnCreated()
   End Sub

   <Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
   Public Property ID() As Integer
      Get
         Return Me._ID
      End Get
      Set(ByVal value As Integer)
         If ((Me._ID = Value) _
            = False) Then
            Me.OnIDChanging(Value)
            Me.SendPropertyChanging()
            Me._ID = Value
            Me.SendPropertyChanged("ID")
            Me.OnIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sShortID", Storage:="_sShortID", DbType:="NVarChar(64) NOT NULL", CanBeNull:=False)> _
   Public Property ShortID() As String
      Get
         Return Me._sShortID
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sShortID, value) = False) Then
            Me.OnsShortIDChanging(value)
            Me.SendPropertyChanging()
            Me._sShortID = value
            Me.SendPropertyChanged("sShortID")
            Me.OnsShortIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sDescription", Storage:="_sDescription", DbType:="NVarChar(256)")> _
   Public Property Description() As String
      Get
         Return Me._sDescription
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sDescription, value) = False) Then
            Me.OnsDescriptionChanging(value)
            Me.SendPropertyChanging()
            Me._sDescription = value
            Me.SendPropertyChanged("sDescription")
            Me.OnsDescriptionChanged()
         End If
      End Set
   End Property
   <Column(Name:="sAddress", Storage:="_sAddress", DbType:="NVarChar(256)")> _
   Public Property Address() As String
      Get
         Return Me._sAddress
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sAddress, value) = False) Then
            Me.OnsAddressChanging(value)
            Me.SendPropertyChanging()
            Me._sAddress = value
            Me.SendPropertyChanged("sAddress")
            Me.OnsAddressChanged()
         End If
      End Set
   End Property
   <Column(Name:="sMailAddress", Storage:="_sMailAddress", DbType:="NVarChar(64)")> _
   Public Property MailAddress() As String
      Get
         Return Me._sMailAddress
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sMailAddress, value) = False) Then
            Me.OnsMailAddressChanging(value)
            Me.SendPropertyChanging()
            Me._sMailAddress = value
            Me.SendPropertyChanged("sMailAddress")
            Me.OnsMailAddressChanged()
         End If
      End Set
   End Property
   <Column(Name:="sMainCatKeywords", Storage:="_sMainCatKeywords", DbType:="NVarChar(256)")> _
   Public Property MainCatKeywords() As String
      Get
         Return Me._sMainCatKeywords
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sMainCatKeywords, value) = False) Then
            Me.OnsMainCatKeywordsChanging(value)
            Me.SendPropertyChanging()
            Me._sMainCatKeywords = value
            Me.SendPropertyChanged("sMainCatKeywords")
            Me.OnsMainCatKeywordsChanged()
         End If
      End Set
   End Property
   <Column(Name:="iMainCatID", Storage:="_iMainCatID", DbType:="Int")> _
   Public Property MainCatID() As System.Nullable(Of Integer)
      Get
         Return Me._iMainCatID
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
         If (Me._iMainCatID.Equals(value) = False) Then
            Me.OniMainCatIDChanging(value)
            Me.SendPropertyChanging()
            Me._iMainCatID = value
            Me.SendPropertyChanged("iMainCatID")
            Me.OniMainCatIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="iElseCatID", Storage:="_iElseCatID", DbType:="Int")> _
   Public Property ElseCatID() As System.Nullable(Of Integer)
      Get
         Return Me._iElseCatID
      End Get
      Set(ByVal value As System.Nullable(Of Integer))
         If (Me._iElseCatID.Equals(value) = False) Then
            Me.OniElseCatIDChanging(value)
            Me.SendPropertyChanging()
            Me._iElseCatID = value
            Me.SendPropertyChanged("iElseCatID")
            Me.OniElseCatIDChanged()
         End If
      End Set
   End Property
   <Column(Name:="sOptionKeywords", Storage:="_sOptionKeywords", DbType:="NVarChar(256)")> _
   Public Property OptionKeywords() As String
      Get
         Return Me._sOptionKeywords
      End Get
      Set(ByVal value As String)
         If (String.Equals(Me._sOptionKeywords, value) = False) Then
            Me.OnsOptionKeywordsChanging(value)
            Me.SendPropertyChanging()
            Me._sOptionKeywords = value
            Me.SendPropertyChanged("sOptionKeywords")
            Me.OnsOptionKeywordsChanged()
         End If
      End Set
   End Property

   <Association(Name:="FK_tblOrderableItems_tblSuppliers", Storage:="_OrderableItem", ThisKey:="ID", OtherKey:="SupplierID", DeleteRule:="NO ACTION")> _
   Public Property OrderableItem() As EntitySet(Of OrderableItem)
      Get
         Return Me._OrderableItem
      End Get
      Set(ByVal value As EntitySet(Of OrderableItem))
         Me._OrderableItem.Assign(value)
      End Set
   End Property
   <Association(Name:="FK_tblOrders_tblSuppliers", Storage:="_Order", ThisKey:="ID", OtherKey:="SupplierID", DeleteRule:="NO ACTION")> _
   Public Property Order() As EntitySet(Of Order)
      Get
         Return Me._Order
      End Get
      Set(ByVal value As EntitySet(Of Order))
         Me._Order.Assign(value)
      End Set
   End Property

   Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
   Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

   Protected Overridable Sub SendPropertyChanging()
      If ((Me.PropertyChangingEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
      End If
   End Sub
   Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
      If ((Me.PropertyChangedEvent Is Nothing) _
         = False) Then
         RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
      End If
   End Sub

   Private Sub attach_OrderableItem(ByVal entity As OrderableItem)
      Me.SendPropertyChanging()
      entity.Supplier = Me
   End Sub
   Private Sub detach_OrderableItem(ByVal entity As OrderableItem)
      Me.SendPropertyChanging()
      entity.Supplier = Nothing
   End Sub
   Private Sub attach_Order(ByVal entity As Order)
      Me.SendPropertyChanging()
      entity.Supplier = Me
   End Sub
   Private Sub detach_Order(ByVal entity As Order)
      Me.SendPropertyChanging()
      entity.Supplier = Nothing
   End Sub
   Public ReadOnly Property TreeNode() As TreeNode
      Get
         Dim nd As New TreeNode(ShortID)
         nd.Tag = ID
         nd.Name = ShortID
         nd.ImageKey = "Supplier"
         nd.SelectedImageKey = nd.ImageKey
         Return nd
      End Get
   End Property
End Class
Public Class SupplierPredicate
   Private _ID As Integer
   Private _ShortID As String

   Public Sub New(ByVal ID As Integer)
      _ID = ID
   End Sub
   Public Sub New(ByVal ShortID As String)
      _ShortID = ShortID
   End Sub

   Public Function CompareIDs(ByVal obj As Supplier) As Boolean
      Return (_ID = obj.ID)
   End Function
   Public Function CompareShortID(ByVal obj As Supplier) As Boolean
      Return (_ShortID = obj.ShortID)
   End Function
End Class

Public Class cbItem
   Public locName As String
   Public locValue As Integer
   Public Sub New(ByVal Name As String, ByVal Value As Integer)
      locName = Name
      locValue = Value
   End Sub

   Public Property Name() As String
      Get
         Return locName
      End Get
      Set(ByVal value As String)
         locName = value
      End Set
   End Property
   Public Property Value() As Integer
      Get
         Return locValue
      End Get
      Set(ByVal value As Integer)
         locValue = value
      End Set
   End Property
   Public Overrides Function ToString() As String
      Return Name
   End Function
End Class

Public Class ItemSum
   Private _ShortID As String
   Private _Description As String
   Private _Number As Integer
   Private _Total As Double

   Public Sub New()
      'do nothing
   End Sub
   Public Sub New(ByVal ShortID As String, ByVal Description As String, ByVal Number As Integer, ByVal Total As Double)
      _ShortID = ShortID
      _Description = Description
      _Number = Number
      _Total = Total
   End Sub

   Public Property ShortID() As String
      Get
         Return _ShortID
      End Get
      Set(ByVal value As String)
         _ShortID = value
      End Set
   End Property
   Public Property Description() As String
      Get
         Return _Description
      End Get
      Set(ByVal value As String)
         _Description = value
      End Set
   End Property
   Public Property Number() As Integer
      Get
         Return _Number
      End Get
      Set(ByVal value As Integer)
         _Number = value
      End Set
   End Property
   Public Property Total() As Double
      Get
         Return _Total
      End Get
      Set(ByVal value As Double)
         _Total = value
      End Set
   End Property
End Class