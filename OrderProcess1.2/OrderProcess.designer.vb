'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="OrderProcess")>  _
Partial Public Class OrderProcessDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  Partial Private Sub InsertOrderItem(instance As OrderItem)
    End Sub
  Partial Private Sub UpdateOrderItem(instance As OrderItem)
    End Sub
  Partial Private Sub DeleteOrderItem(instance As OrderItem)
    End Sub
  Partial Private Sub InsertItem(instance As Item)
    End Sub
  Partial Private Sub UpdateItem(instance As Item)
    End Sub
  Partial Private Sub DeleteItem(instance As Item)
    End Sub
  Partial Private Sub InsertSupplier(instance As Supplier)
    End Sub
  Partial Private Sub UpdateSupplier(instance As Supplier)
    End Sub
  Partial Private Sub DeleteSupplier(instance As Supplier)
    End Sub
  Partial Private Sub InsertOrderer(instance As Orderer)
    End Sub
  Partial Private Sub UpdateOrderer(instance As Orderer)
    End Sub
  Partial Private Sub DeleteOrderer(instance As Orderer)
    End Sub
  Partial Private Sub InsertItemClass(instance As ItemClass)
    End Sub
  Partial Private Sub UpdateItemClass(instance As ItemClass)
    End Sub
  Partial Private Sub DeleteItemClass(instance As ItemClass)
    End Sub
  Partial Private Sub InsertAccountingUnit(instance As AccountingUnit)
    End Sub
  Partial Private Sub UpdateAccountingUnit(instance As AccountingUnit)
    End Sub
  Partial Private Sub DeleteAccountingUnit(instance As AccountingUnit)
    End Sub
  Partial Private Sub InsertConfirmedItem(instance As ConfirmedItem)
    End Sub
  Partial Private Sub UpdateConfirmedItem(instance As ConfirmedItem)
    End Sub
  Partial Private Sub DeleteConfirmedItem(instance As ConfirmedItem)
    End Sub
  Partial Private Sub InsertOrderableItem(instance As OrderableItem)
    End Sub
  Partial Private Sub UpdateOrderableItem(instance As OrderableItem)
    End Sub
  Partial Private Sub DeleteOrderableItem(instance As OrderableItem)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.OrderProcess1._2.My.MySettings.Default.OrderProcessConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
	
	Public ReadOnly Property OrderItems() As System.Data.Linq.Table(Of OrderItem)
		Get
			Return Me.GetTable(Of OrderItem)
		End Get
	End Property
	
	Public ReadOnly Property Items() As System.Data.Linq.Table(Of Item)
		Get
			Return Me.GetTable(Of Item)
		End Get
	End Property
	
	Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Supplier)
		Get
			Return Me.GetTable(Of Supplier)
		End Get
	End Property
	
	Public ReadOnly Property Orderers() As System.Data.Linq.Table(Of Orderer)
		Get
			Return Me.GetTable(Of Orderer)
		End Get
	End Property
	
	Public ReadOnly Property ItemClasses() As System.Data.Linq.Table(Of ItemClass)
		Get
			Return Me.GetTable(Of ItemClass)
		End Get
	End Property
	
	Public ReadOnly Property AccountingUnits() As System.Data.Linq.Table(Of AccountingUnit)
		Get
			Return Me.GetTable(Of AccountingUnit)
		End Get
	End Property
	
	Public ReadOnly Property ConfirmedItems() As System.Data.Linq.Table(Of ConfirmedItem)
		Get
			Return Me.GetTable(Of ConfirmedItem)
		End Get
	End Property
	
	Public ReadOnly Property OrderableItemOptions() As System.Data.Linq.Table(Of OrderableItemOption)
		Get
			Return Me.GetTable(Of OrderableItemOption)
		End Get
	End Property
	
	Public ReadOnly Property OrderableItems() As System.Data.Linq.Table(Of OrderableItem)
		Get
			Return Me.GetTable(Of OrderableItem)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblOrders")>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Nr As String
	
	Private _OrderDate As System.Nullable(Of Date)
	
	Private _OrdererID As Integer
	
	Private _SupplierID As System.Nullable(Of Integer)
	
	Private _Remarks As String
	
	Private _EProc As Boolean
	
	Private _EProcOrderNr As String
	
	Private _Finalized As Boolean
	
	Private _OrderItems As EntitySet(Of OrderItem)
	
	Private _Supplier As EntityRef(Of Supplier)
	
	Private _Orderer As EntityRef(Of Orderer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNrChanging(value As String)
    End Sub
    Partial Private Sub OnNrChanged()
    End Sub
    Partial Private Sub OnOrderDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnOrderDateChanged()
    End Sub
    Partial Private Sub OnOrdererIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrdererIDChanged()
    End Sub
    Partial Private Sub OnSupplierIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSupplierIDChanged()
    End Sub
    Partial Private Sub OnRemarksChanging(value As String)
    End Sub
    Partial Private Sub OnRemarksChanged()
    End Sub
    Partial Private Sub OnEProcChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEProcChanged()
    End Sub
    Partial Private Sub OnEProcOrderNrChanging(value As String)
    End Sub
    Partial Private Sub OnEProcOrderNrChanged()
    End Sub
    Partial Private Sub OnFinalizedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFinalizedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
		Me._Supplier = CType(Nothing, EntityRef(Of Supplier))
		Me._Orderer = CType(Nothing, EntityRef(Of Orderer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sNr", Storage:="_Nr", DbType:="NVarChar(63)")>  _
	Public Property Nr() As String
		Get
			Return Me._Nr
		End Get
		Set
			If (String.Equals(Me._Nr, value) = false) Then
				Me.OnNrChanging(value)
				Me.SendPropertyChanging
				Me._Nr = value
				Me.SendPropertyChanged("Nr")
				Me.OnNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="dOrderDate", Storage:="_OrderDate", DbType:="DateTime")>  _
	Public Property OrderDate() As System.Nullable(Of Date)
		Get
			Return Me._OrderDate
		End Get
		Set
			If (Me._OrderDate.Equals(value) = false) Then
				Me.OnOrderDateChanging(value)
				Me.SendPropertyChanging
				Me._OrderDate = value
				Me.SendPropertyChanged("OrderDate")
				Me.OnOrderDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iOrdererID", Storage:="_OrdererID", DbType:="Int NOT NULL")>  _
	Public Property OrdererID() As Integer
		Get
			Return Me._OrdererID
		End Get
		Set
			If ((Me._OrdererID = value)  _
						= false) Then
				Me.OnOrdererIDChanging(value)
				Me.SendPropertyChanging
				Me._OrdererID = value
				Me.SendPropertyChanged("OrdererID")
				Me.OnOrdererIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iSupplierID", Storage:="_SupplierID", DbType:="Int")>  _
	Public Property SupplierID() As System.Nullable(Of Integer)
		Get
			Return Me._SupplierID
		End Get
		Set
			If (Me._SupplierID.Equals(value) = false) Then
				Me.OnSupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._SupplierID = value
				Me.SendPropertyChanged("SupplierID")
				Me.OnSupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sRemarks", Storage:="_Remarks", DbType:="NVarChar(255)")>  _
	Public Property Remarks() As String
		Get
			Return Me._Remarks
		End Get
		Set
			If (String.Equals(Me._Remarks, value) = false) Then
				Me.OnRemarksChanging(value)
				Me.SendPropertyChanging
				Me._Remarks = value
				Me.SendPropertyChanged("Remarks")
				Me.OnRemarksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="bEProc", Storage:="_EProc", DbType:="Bit NOT NULL")>  _
	Public Property EProc() As Boolean
		Get
			Return Me._EProc
		End Get
		Set
			If ((Me._EProc = value)  _
						= false) Then
				Me.OnEProcChanging(value)
				Me.SendPropertyChanging
				Me._EProc = value
				Me.SendPropertyChanged("EProc")
				Me.OnEProcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sEProcOrderNr", Storage:="_EProcOrderNr", DbType:="NVarChar(50)")>  _
	Public Property EProcOrderNr() As String
		Get
			Return Me._EProcOrderNr
		End Get
		Set
			If (String.Equals(Me._EProcOrderNr, value) = false) Then
				Me.OnEProcOrderNrChanging(value)
				Me.SendPropertyChanging
				Me._EProcOrderNr = value
				Me.SendPropertyChanged("EProcOrderNr")
				Me.OnEProcOrderNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="bFinalized", Storage:="_Finalized", DbType:="Bit NOT NULL")>  _
	Public Property Finalized() As Boolean
		Get
			Return Me._Finalized
		End Get
		Set
			If ((Me._Finalized = value)  _
						= false) Then
				Me.OnFinalizedChanging(value)
				Me.SendPropertyChanging
				Me._Finalized = value
				Me.SendPropertyChanged("Finalized")
				Me.OnFinalizedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderItem", Storage:="_OrderItems", ThisKey:="ID", OtherKey:="OrderID")>  _
	Public Property OrderItems() As EntitySet(Of OrderItem)
		Get
			Return Me._OrderItems
		End Get
		Set
			Me._OrderItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_Order", Storage:="_Supplier", ThisKey:="SupplierID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Supplier() As Supplier
		Get
			Return Me._Supplier.Entity
		End Get
		Set
			Dim previousValue As Supplier = Me._Supplier.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Supplier.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Supplier.Entity = Nothing
					previousValue.Orders.Remove(Me)
				End If
				Me._Supplier.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders.Add(Me)
					Me._SupplierID = value.ID
				Else
					Me._SupplierID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Supplier")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Orderer_Order", Storage:="_Orderer", ThisKey:="OrdererID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Orderer() As Orderer
		Get
			Return Me._Orderer.Entity
		End Get
		Set
			Dim previousValue As Orderer = Me._Orderer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Orderer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Orderer.Entity = Nothing
					previousValue.Orders.Remove(Me)
				End If
				Me._Orderer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders.Add(Me)
					Me._OrdererID = value.ID
				Else
					Me._OrdererID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Orderer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.[Order] = Me
	End Sub
	
	Private Sub detach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.[Order] = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblOrderItems")>  _
Partial Public Class OrderItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _OrderID As Integer
	
	Private _Description As String
	
	Private _ItemClassID As Integer
	
	Private _NrOrdered As System.Nullable(Of Integer)
	
	Private _NrDelivered As System.Nullable(Of Integer)
	
	Private _CompletionDate As System.Nullable(Of Date)
	
	Private _OrderableItemsID As System.Nullable(Of Integer)
	
	Private _FromDragging As System.Nullable(Of Boolean)
	
	Private _Items As EntitySet(Of Item)
	
	Private _ConfirmedItems As EntitySet(Of ConfirmedItem)
	
	Private _Order As EntityRef(Of [Order])
	
	Private _ItemClass As EntityRef(Of ItemClass)
	
	Private _OrderableItem As EntityRef(Of OrderableItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnItemClassIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemClassIDChanged()
    End Sub
    Partial Private Sub OnNrOrderedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNrOrderedChanged()
    End Sub
    Partial Private Sub OnNrDeliveredChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNrDeliveredChanged()
    End Sub
    Partial Private Sub OnCompletionDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCompletionDateChanged()
    End Sub
    Partial Private Sub OnOrderableItemsIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderableItemsIDChanged()
    End Sub
    Partial Private Sub OnFromDraggingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnFromDraggingChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Items = New EntitySet(Of Item)(AddressOf Me.attach_Items, AddressOf Me.detach_Items)
		Me._ConfirmedItems = New EntitySet(Of ConfirmedItem)(AddressOf Me.attach_ConfirmedItems, AddressOf Me.detach_ConfirmedItems)
		Me._Order = CType(Nothing, EntityRef(Of [Order]))
		Me._ItemClass = CType(Nothing, EntityRef(Of ItemClass))
		Me._OrderableItem = CType(Nothing, EntityRef(Of OrderableItem))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iOrderID", Storage:="_OrderID", DbType:="Int NOT NULL")>  _
	Public Property OrderID() As Integer
		Get
			Return Me._OrderID
		End Get
		Set
			If ((Me._OrderID = value)  _
						= false) Then
				Me.OnOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderID = value
				Me.SendPropertyChanged("OrderID")
				Me.OnOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sDescription", Storage:="_Description", DbType:="NVarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iItemClassID", Storage:="_ItemClassID", DbType:="Int NOT NULL")>  _
	Public Property ItemClassID() As Integer
		Get
			Return Me._ItemClassID
		End Get
		Set
			If ((Me._ItemClassID = value)  _
						= false) Then
				Me.OnItemClassIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemClassID = value
				Me.SendPropertyChanged("ItemClassID")
				Me.OnItemClassIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iNrOrdered", Storage:="_NrOrdered", DbType:="Int")>  _
	Public Property NrOrdered() As System.Nullable(Of Integer)
		Get
			Return Me._NrOrdered
		End Get
		Set
			If (Me._NrOrdered.Equals(value) = false) Then
				Me.OnNrOrderedChanging(value)
				Me.SendPropertyChanging
				Me._NrOrdered = value
				Me.SendPropertyChanged("NrOrdered")
				Me.OnNrOrderedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iNrDelivered", Storage:="_NrDelivered", DbType:="Int")>  _
	Public Property NrDelivered() As System.Nullable(Of Integer)
		Get
			Return Me._NrDelivered
		End Get
		Set
			If (Me._NrDelivered.Equals(value) = false) Then
				Me.OnNrDeliveredChanging(value)
				Me.SendPropertyChanging
				Me._NrDelivered = value
				Me.SendPropertyChanged("NrDelivered")
				Me.OnNrDeliveredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="dCompletionDate", Storage:="_CompletionDate", DbType:="DateTime")>  _
	Public Property CompletionDate() As System.Nullable(Of Date)
		Get
			Return Me._CompletionDate
		End Get
		Set
			If (Me._CompletionDate.Equals(value) = false) Then
				Me.OnCompletionDateChanging(value)
				Me.SendPropertyChanging
				Me._CompletionDate = value
				Me.SendPropertyChanged("CompletionDate")
				Me.OnCompletionDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iOrderableItemsID", Storage:="_OrderableItemsID", DbType:="Int")>  _
	Public Property OrderableItemsID() As System.Nullable(Of Integer)
		Get
			Return Me._OrderableItemsID
		End Get
		Set
			If (Me._OrderableItemsID.Equals(value) = false) Then
				Me.OnOrderableItemsIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderableItemsID = value
				Me.SendPropertyChanged("OrderableItemsID")
				Me.OnOrderableItemsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="bFromDragging", Storage:="_FromDragging", DbType:="Bit")>  _
	Public Property FromDragging() As System.Nullable(Of Boolean)
		Get
			Return Me._FromDragging
		End Get
		Set
			If (Me._FromDragging.Equals(value) = false) Then
				Me.OnFromDraggingChanging(value)
				Me.SendPropertyChanging
				Me._FromDragging = value
				Me.SendPropertyChanged("FromDragging")
				Me.OnFromDraggingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderItem_Item", Storage:="_Items", ThisKey:="ID", OtherKey:="OrderItemID")>  _
	Public Property Items() As EntitySet(Of Item)
		Get
			Return Me._Items
		End Get
		Set
			Me._Items.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderItem_ConfirmedItem", Storage:="_ConfirmedItems", ThisKey:="ID", OtherKey:="OrderItemID")>  _
	Public Property ConfirmedItems() As EntitySet(Of ConfirmedItem)
		Get
			Return Me._ConfirmedItems
		End Get
		Set
			Me._ConfirmedItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderItem", Storage:="_Order", ThisKey:="OrderID", OtherKey:="ID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property [Order]() As [Order]
		Get
			Return Me._Order.Entity
		End Get
		Set
			Dim previousValue As [Order] = Me._Order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Order.Entity = Nothing
					previousValue.OrderItems.Remove(Me)
				End If
				Me._Order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderItems.Add(Me)
					Me._OrderID = value.ID
				Else
					Me._OrderID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("[Order]")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemClass_OrderItem", Storage:="_ItemClass", ThisKey:="ItemClassID", OtherKey:="ID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property ItemClass() As ItemClass
		Get
			Return Me._ItemClass.Entity
		End Get
		Set
			Dim previousValue As ItemClass = Me._ItemClass.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ItemClass.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ItemClass.Entity = Nothing
					previousValue.OrderItems.Remove(Me)
				End If
				Me._ItemClass.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderItems.Add(Me)
					Me._ItemClassID = value.ID
				Else
					Me._ItemClassID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ItemClass")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderableItem_OrderItem", Storage:="_OrderableItem", ThisKey:="OrderableItemsID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property OrderableItem() As OrderableItem
		Get
			Return Me._OrderableItem.Entity
		End Get
		Set
			Dim previousValue As OrderableItem = Me._OrderableItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OrderableItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OrderableItem.Entity = Nothing
					previousValue.OrderItems.Remove(Me)
				End If
				Me._OrderableItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderItems.Add(Me)
					Me._OrderableItemsID = value.ID
				Else
					Me._OrderableItemsID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("OrderableItem")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Items(ByVal entity As Item)
		Me.SendPropertyChanging
		entity.OrderItem = Me
	End Sub
	
	Private Sub detach_Items(ByVal entity As Item)
		Me.SendPropertyChanging
		entity.OrderItem = Nothing
	End Sub
	
	Private Sub attach_ConfirmedItems(ByVal entity As ConfirmedItem)
		Me.SendPropertyChanging
		entity.OrderItem = Me
	End Sub
	
	Private Sub detach_ConfirmedItems(ByVal entity As ConfirmedItem)
		Me.SendPropertyChanging
		entity.OrderItem = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblItems")>  _
Partial Public Class Item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _OrderItemID As Integer
	
	Private _ItemID As String
	
	Private _Delivery As Date
	
	Private _Price As Double
	
	Private _Deliverer As String
	
	Private _Recipient As String
	
	Private _Assigner As String
	
	Private _AccountingUnitID As System.Nullable(Of Integer)
	
	Private _Accounting As System.Nullable(Of Date)
	
	Private _AimsID As String
	
	Private _ConfirmedItemID As System.Nullable(Of Integer)
	
	Private _OrderItem As EntityRef(Of OrderItem)
	
	Private _AccountingUnit As EntityRef(Of AccountingUnit)
	
	Private _ConfirmedItem As EntityRef(Of ConfirmedItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnOrderItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderItemIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As String)
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnDeliveryChanging(value As Date)
    End Sub
    Partial Private Sub OnDeliveryChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Double)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnDelivererChanging(value As String)
    End Sub
    Partial Private Sub OnDelivererChanged()
    End Sub
    Partial Private Sub OnRecipientChanging(value As String)
    End Sub
    Partial Private Sub OnRecipientChanged()
    End Sub
    Partial Private Sub OnAssignerChanging(value As String)
    End Sub
    Partial Private Sub OnAssignerChanged()
    End Sub
    Partial Private Sub OnAccountingUnitIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAccountingUnitIDChanged()
    End Sub
    Partial Private Sub OnAccountingChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAccountingChanged()
    End Sub
    Partial Private Sub OnAimsIDChanging(value As String)
    End Sub
    Partial Private Sub OnAimsIDChanged()
    End Sub
    Partial Private Sub OnConfirmedItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnConfirmedItemIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderItem = CType(Nothing, EntityRef(Of OrderItem))
		Me._AccountingUnit = CType(Nothing, EntityRef(Of AccountingUnit))
		Me._ConfirmedItem = CType(Nothing, EntityRef(Of ConfirmedItem))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iOrderItemID", Storage:="_OrderItemID", DbType:="Int NOT NULL")>  _
	Public Property OrderItemID() As Integer
		Get
			Return Me._OrderItemID
		End Get
		Set
			If ((Me._OrderItemID = value)  _
						= false) Then
				Me.OnOrderItemIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderItemID = value
				Me.SendPropertyChanged("OrderItemID")
				Me.OnOrderItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sItemID", Storage:="_ItemID", DbType:="NVarChar(64)")>  _
	Public Property ItemID() As String
		Get
			Return Me._ItemID
		End Get
		Set
			If (String.Equals(Me._ItemID, value) = false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="dDelivery", Storage:="_Delivery", DbType:="DateTime NOT NULL")>  _
	Public Property Delivery() As Date
		Get
			Return Me._Delivery
		End Get
		Set
			If ((Me._Delivery = value)  _
						= false) Then
				Me.OnDeliveryChanging(value)
				Me.SendPropertyChanging
				Me._Delivery = value
				Me.SendPropertyChanged("Delivery")
				Me.OnDeliveryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="cPrice", Storage:="_Price", DbType:="Float NOT NULL")>  _
	Public Property Price() As Double
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sDeliverer", Storage:="_Deliverer", DbType:="NVarChar(64)")>  _
	Public Property Deliverer() As String
		Get
			Return Me._Deliverer
		End Get
		Set
			If (String.Equals(Me._Deliverer, value) = false) Then
				Me.OnDelivererChanging(value)
				Me.SendPropertyChanging
				Me._Deliverer = value
				Me.SendPropertyChanged("Deliverer")
				Me.OnDelivererChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sRecipient", Storage:="_Recipient", DbType:="NVarChar(64)")>  _
	Public Property Recipient() As String
		Get
			Return Me._Recipient
		End Get
		Set
			If (String.Equals(Me._Recipient, value) = false) Then
				Me.OnRecipientChanging(value)
				Me.SendPropertyChanging
				Me._Recipient = value
				Me.SendPropertyChanged("Recipient")
				Me.OnRecipientChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sAssigner", Storage:="_Assigner", DbType:="NVarChar(64)")>  _
	Public Property Assigner() As String
		Get
			Return Me._Assigner
		End Get
		Set
			If (String.Equals(Me._Assigner, value) = false) Then
				Me.OnAssignerChanging(value)
				Me.SendPropertyChanging
				Me._Assigner = value
				Me.SendPropertyChanged("Assigner")
				Me.OnAssignerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iAccountingUnitID", Storage:="_AccountingUnitID", DbType:="Int")>  _
	Public Property AccountingUnitID() As System.Nullable(Of Integer)
		Get
			Return Me._AccountingUnitID
		End Get
		Set
			If (Me._AccountingUnitID.Equals(value) = false) Then
				Me.OnAccountingUnitIDChanging(value)
				Me.SendPropertyChanging
				Me._AccountingUnitID = value
				Me.SendPropertyChanged("AccountingUnitID")
				Me.OnAccountingUnitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="dAccounting", Storage:="_Accounting", DbType:="DateTime")>  _
	Public Property Accounting() As System.Nullable(Of Date)
		Get
			Return Me._Accounting
		End Get
		Set
			If (Me._Accounting.Equals(value) = false) Then
				Me.OnAccountingChanging(value)
				Me.SendPropertyChanging
				Me._Accounting = value
				Me.SendPropertyChanged("Accounting")
				Me.OnAccountingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sAimsID", Storage:="_AimsID", DbType:="NVarChar(16)")>  _
	Public Property AimsID() As String
		Get
			Return Me._AimsID
		End Get
		Set
			If (String.Equals(Me._AimsID, value) = false) Then
				Me.OnAimsIDChanging(value)
				Me.SendPropertyChanging
				Me._AimsID = value
				Me.SendPropertyChanged("AimsID")
				Me.OnAimsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iConfirmedItemID", Storage:="_ConfirmedItemID", DbType:="Int")>  _
	Public Property ConfirmedItemID() As System.Nullable(Of Integer)
		Get
			Return Me._ConfirmedItemID
		End Get
		Set
			If (Me._ConfirmedItemID.Equals(value) = false) Then
				Me.OnConfirmedItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ConfirmedItemID = value
				Me.SendPropertyChanged("ConfirmedItemID")
				Me.OnConfirmedItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderItem_Item", Storage:="_OrderItem", ThisKey:="OrderItemID", OtherKey:="ID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property OrderItem() As OrderItem
		Get
			Return Me._OrderItem.Entity
		End Get
		Set
			Dim previousValue As OrderItem = Me._OrderItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OrderItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OrderItem.Entity = Nothing
					previousValue.Items.Remove(Me)
				End If
				Me._OrderItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Items.Add(Me)
					Me._OrderItemID = value.ID
				Else
					Me._OrderItemID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("OrderItem")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AccountingUnit_Item", Storage:="_AccountingUnit", ThisKey:="AccountingUnitID", OtherKey:="ID", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property AccountingUnit() As AccountingUnit
		Get
			Return Me._AccountingUnit.Entity
		End Get
		Set
			Dim previousValue As AccountingUnit = Me._AccountingUnit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AccountingUnit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AccountingUnit.Entity = Nothing
					previousValue.Items.Remove(Me)
				End If
				Me._AccountingUnit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Items.Add(Me)
					Me._AccountingUnitID = value.ID
				Else
					Me._AccountingUnitID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("AccountingUnit")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ConfirmedItem_Item", Storage:="_ConfirmedItem", ThisKey:="ConfirmedItemID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property ConfirmedItem() As ConfirmedItem
		Get
			Return Me._ConfirmedItem.Entity
		End Get
		Set
			Dim previousValue As ConfirmedItem = Me._ConfirmedItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ConfirmedItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ConfirmedItem.Entity = Nothing
					previousValue.Items.Remove(Me)
				End If
				Me._ConfirmedItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Items.Add(Me)
					Me._ConfirmedItemID = value.ID
				Else
					Me._ConfirmedItemID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ConfirmedItem")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSuppliers")>  _
Partial Public Class Supplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ShortID As String
	
	Private _Description As String
	
	Private _Address As String
	
	Private _MailAddress As String
	
	Private _MainCatKeywords As String
	
	Private _MainCatID As System.Nullable(Of Integer)
	
	Private _ElseCatID As System.Nullable(Of Integer)
	
	Private _OptionKeywords As String
	
	Private _CsvOrder As String
	
	Private _Orders As EntitySet(Of [Order])
	
	Private _OrderableItems As EntitySet(Of OrderableItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnShortIDChanging(value As String)
    End Sub
    Partial Private Sub OnShortIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnMailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnMailAddressChanged()
    End Sub
    Partial Private Sub OnMainCatKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnMainCatKeywordsChanged()
    End Sub
    Partial Private Sub OnMainCatIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMainCatIDChanged()
    End Sub
    Partial Private Sub OnElseCatIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnElseCatIDChanged()
    End Sub
    Partial Private Sub OnOptionKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnOptionKeywordsChanged()
    End Sub
    Partial Private Sub OnCsvOrderChanging(value As String)
    End Sub
    Partial Private Sub OnCsvOrderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
		Me._OrderableItems = New EntitySet(Of OrderableItem)(AddressOf Me.attach_OrderableItems, AddressOf Me.detach_OrderableItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sShortID", Storage:="_ShortID", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false)>  _
	Public Property ShortID() As String
		Get
			Return Me._ShortID
		End Get
		Set
			If (String.Equals(Me._ShortID, value) = false) Then
				Me.OnShortIDChanging(value)
				Me.SendPropertyChanging
				Me._ShortID = value
				Me.SendPropertyChanged("ShortID")
				Me.OnShortIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sDescription", Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sAddress", Storage:="_Address", DbType:="NVarChar(256)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sMailAddress", Storage:="_MailAddress", DbType:="NVarChar(64)")>  _
	Public Property MailAddress() As String
		Get
			Return Me._MailAddress
		End Get
		Set
			If (String.Equals(Me._MailAddress, value) = false) Then
				Me.OnMailAddressChanging(value)
				Me.SendPropertyChanging
				Me._MailAddress = value
				Me.SendPropertyChanged("MailAddress")
				Me.OnMailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sMainCatKeywords", Storage:="_MainCatKeywords", DbType:="NVarChar(256)")>  _
	Public Property MainCatKeywords() As String
		Get
			Return Me._MainCatKeywords
		End Get
		Set
			If (String.Equals(Me._MainCatKeywords, value) = false) Then
				Me.OnMainCatKeywordsChanging(value)
				Me.SendPropertyChanging
				Me._MainCatKeywords = value
				Me.SendPropertyChanged("MainCatKeywords")
				Me.OnMainCatKeywordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iMainCatID", Storage:="_MainCatID", DbType:="Int")>  _
	Public Property MainCatID() As System.Nullable(Of Integer)
		Get
			Return Me._MainCatID
		End Get
		Set
			If (Me._MainCatID.Equals(value) = false) Then
				Me.OnMainCatIDChanging(value)
				Me.SendPropertyChanging
				Me._MainCatID = value
				Me.SendPropertyChanged("MainCatID")
				Me.OnMainCatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iElseCatID", Storage:="_ElseCatID", DbType:="Int")>  _
	Public Property ElseCatID() As System.Nullable(Of Integer)
		Get
			Return Me._ElseCatID
		End Get
		Set
			If (Me._ElseCatID.Equals(value) = false) Then
				Me.OnElseCatIDChanging(value)
				Me.SendPropertyChanging
				Me._ElseCatID = value
				Me.SendPropertyChanged("ElseCatID")
				Me.OnElseCatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sOptionKeywords", Storage:="_OptionKeywords", DbType:="NVarChar(256)")>  _
	Public Property OptionKeywords() As String
		Get
			Return Me._OptionKeywords
		End Get
		Set
			If (String.Equals(Me._OptionKeywords, value) = false) Then
				Me.OnOptionKeywordsChanging(value)
				Me.SendPropertyChanging
				Me._OptionKeywords = value
				Me.SendPropertyChanged("OptionKeywords")
				Me.OnOptionKeywordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sCsvOrder", Storage:="_CsvOrder", DbType:="NVarChar(32)")>  _
	Public Property CsvOrder() As String
		Get
			Return Me._CsvOrder
		End Get
		Set
			If (String.Equals(Me._CsvOrder, value) = false) Then
				Me.OnCsvOrderChanging(value)
				Me.SendPropertyChanging
				Me._CsvOrder = value
				Me.SendPropertyChanged("CsvOrder")
				Me.OnCsvOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_Order", Storage:="_Orders", ThisKey:="ID", OtherKey:="SupplierID")>  _
	Public Property Orders() As EntitySet(Of [Order])
		Get
			Return Me._Orders
		End Get
		Set
			Me._Orders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_OrderableItem", Storage:="_OrderableItems", ThisKey:="ID", OtherKey:="SupplierID")>  _
	Public Property OrderableItems() As EntitySet(Of OrderableItem)
		Get
			Return Me._OrderableItems
		End Get
		Set
			Me._OrderableItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Supplier = Me
	End Sub
	
	Private Sub detach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Supplier = Nothing
	End Sub
	
	Private Sub attach_OrderableItems(ByVal entity As OrderableItem)
		Me.SendPropertyChanging
		entity.Supplier = Me
	End Sub
	
	Private Sub detach_OrderableItems(ByVal entity As OrderableItem)
		Me.SendPropertyChanging
		entity.Supplier = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblOrderers")>  _
Partial Public Class Orderer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _EMailAddress As String
	
	Private _Orders As EntitySet(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnEMailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEMailAddressChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sName", Storage:="_Name", DbType:="NVarChar(63) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sEMailAddress", Storage:="_EMailAddress", DbType:="NVarChar(63) NOT NULL", CanBeNull:=false)>  _
	Public Property EMailAddress() As String
		Get
			Return Me._EMailAddress
		End Get
		Set
			If (String.Equals(Me._EMailAddress, value) = false) Then
				Me.OnEMailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EMailAddress = value
				Me.SendPropertyChanged("EMailAddress")
				Me.OnEMailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Orderer_Order", Storage:="_Orders", ThisKey:="ID", OtherKey:="OrdererID")>  _
	Public Property Orders() As EntitySet(Of [Order])
		Get
			Return Me._Orders
		End Get
		Set
			Me._Orders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Orderer = Me
	End Sub
	
	Private Sub detach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Orderer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblItemClass")>  _
Partial Public Class ItemClass
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ShortID As String
	
	Private _Description As String
	
	Private _OrderItems As EntitySet(Of OrderItem)
	
	Private _OrderableItems As EntitySet(Of OrderableItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnShortIDChanging(value As String)
    End Sub
    Partial Private Sub OnShortIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
		Me._OrderableItems = New EntitySet(Of OrderableItem)(AddressOf Me.attach_OrderableItems, AddressOf Me.detach_OrderableItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sShortID", Storage:="_ShortID", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false)>  _
	Public Property ShortID() As String
		Get
			Return Me._ShortID
		End Get
		Set
			If (String.Equals(Me._ShortID, value) = false) Then
				Me.OnShortIDChanging(value)
				Me.SendPropertyChanging
				Me._ShortID = value
				Me.SendPropertyChanged("ShortID")
				Me.OnShortIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sDescription", Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemClass_OrderItem", Storage:="_OrderItems", ThisKey:="ID", OtherKey:="ItemClassID")>  _
	Public Property OrderItems() As EntitySet(Of OrderItem)
		Get
			Return Me._OrderItems
		End Get
		Set
			Me._OrderItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemClass_OrderableItem", Storage:="_OrderableItems", ThisKey:="ID", OtherKey:="ItemClassID")>  _
	Public Property OrderableItems() As EntitySet(Of OrderableItem)
		Get
			Return Me._OrderableItems
		End Get
		Set
			Me._OrderableItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.ItemClass = Me
	End Sub
	
	Private Sub detach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.ItemClass = Nothing
	End Sub
	
	Private Sub attach_OrderableItems(ByVal entity As OrderableItem)
		Me.SendPropertyChanging
		entity.ItemClass = Me
	End Sub
	
	Private Sub detach_OrderableItems(ByVal entity As OrderableItem)
		Me.SendPropertyChanging
		entity.ItemClass = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAccountingUnits")>  _
Partial Public Class AccountingUnit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ShortID As String
	
	Private _CostCenter As System.Nullable(Of Long)
	
	Private _ITManager As String
	
	Private _Besitzer As String
	
	Private _Items As EntitySet(Of Item)
	
	Private _ConfirmedItems As EntitySet(Of ConfirmedItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnShortIDChanging(value As String)
    End Sub
    Partial Private Sub OnShortIDChanged()
    End Sub
    Partial Private Sub OnCostCenterChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCostCenterChanged()
    End Sub
    Partial Private Sub OnITManagerChanging(value As String)
    End Sub
    Partial Private Sub OnITManagerChanged()
    End Sub
    Partial Private Sub OnBesitzerChanging(value As String)
    End Sub
    Partial Private Sub OnBesitzerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Items = New EntitySet(Of Item)(AddressOf Me.attach_Items, AddressOf Me.detach_Items)
		Me._ConfirmedItems = New EntitySet(Of ConfirmedItem)(AddressOf Me.attach_ConfirmedItems, AddressOf Me.detach_ConfirmedItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sShortID", Storage:="_ShortID", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false)>  _
	Public Property ShortID() As String
		Get
			Return Me._ShortID
		End Get
		Set
			If (String.Equals(Me._ShortID, value) = false) Then
				Me.OnShortIDChanging(value)
				Me.SendPropertyChanging
				Me._ShortID = value
				Me.SendPropertyChanged("ShortID")
				Me.OnShortIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iCostCenter", Storage:="_CostCenter", DbType:="BigInt")>  _
	Public Property CostCenter() As System.Nullable(Of Long)
		Get
			Return Me._CostCenter
		End Get
		Set
			If (Me._CostCenter.Equals(value) = false) Then
				Me.OnCostCenterChanging(value)
				Me.SendPropertyChanging
				Me._CostCenter = value
				Me.SendPropertyChanged("CostCenter")
				Me.OnCostCenterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sITManager", Storage:="_ITManager", DbType:="NVarChar(64)")>  _
	Public Property ITManager() As String
		Get
			Return Me._ITManager
		End Get
		Set
			If (String.Equals(Me._ITManager, value) = false) Then
				Me.OnITManagerChanging(value)
				Me.SendPropertyChanging
				Me._ITManager = value
				Me.SendPropertyChanged("ITManager")
				Me.OnITManagerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sBesitzer", Storage:="_Besitzer", DbType:="NVarChar(8)")>  _
	Public Property Besitzer() As String
		Get
			Return Me._Besitzer
		End Get
		Set
			If (String.Equals(Me._Besitzer, value) = false) Then
				Me.OnBesitzerChanging(value)
				Me.SendPropertyChanging
				Me._Besitzer = value
				Me.SendPropertyChanged("Besitzer")
				Me.OnBesitzerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AccountingUnit_Item", Storage:="_Items", ThisKey:="ID", OtherKey:="AccountingUnitID")>  _
	Public Property Items() As EntitySet(Of Item)
		Get
			Return Me._Items
		End Get
		Set
			Me._Items.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AccountingUnit_ConfirmedItem", Storage:="_ConfirmedItems", ThisKey:="ID", OtherKey:="AccountingUnitID")>  _
	Public Property ConfirmedItems() As EntitySet(Of ConfirmedItem)
		Get
			Return Me._ConfirmedItems
		End Get
		Set
			Me._ConfirmedItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Items(ByVal entity As Item)
		Me.SendPropertyChanging
		entity.AccountingUnit = Me
	End Sub
	
	Private Sub detach_Items(ByVal entity As Item)
		Me.SendPropertyChanging
		entity.AccountingUnit = Nothing
	End Sub
	
	Private Sub attach_ConfirmedItems(ByVal entity As ConfirmedItem)
		Me.SendPropertyChanging
		entity.AccountingUnit = Me
	End Sub
	
	Private Sub detach_ConfirmedItems(ByVal entity As ConfirmedItem)
		Me.SendPropertyChanging
		entity.AccountingUnit = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblConfirmedItems")>  _
Partial Public Class ConfirmedItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _OrderableItemsID As Integer
	
	Private _QuantityOrdered As Integer
	
	Private _Orderer As String
	
	Private _RecipientName As String
	
	Private _CostCenterResponsible As String
	
	Private _ItManager As String
	
	Private _AccountingUnitID As Integer
	
	Private _NotesURL As String
	
	Private _DateConfirmed As System.Nullable(Of Date)
	
	Private _OrderItemID As System.Nullable(Of Integer)
	
	Private _DateOrdered As System.Nullable(Of Date)
	
	Private _QuantityAssigned As System.Nullable(Of Integer)
	
	Private _DateAssigned As System.Nullable(Of Date)
	
	Private _Items As EntitySet(Of Item)
	
	Private _AccountingUnit As EntityRef(Of AccountingUnit)
	
	Private _OrderItem As EntityRef(Of OrderItem)
	
	Private _OrderableItem As EntityRef(Of OrderableItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnOrderableItemsIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderableItemsIDChanged()
    End Sub
    Partial Private Sub OnQuantityOrderedChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuantityOrderedChanged()
    End Sub
    Partial Private Sub OnOrdererChanging(value As String)
    End Sub
    Partial Private Sub OnOrdererChanged()
    End Sub
    Partial Private Sub OnRecipientNameChanging(value As String)
    End Sub
    Partial Private Sub OnRecipientNameChanged()
    End Sub
    Partial Private Sub OnCostCenterResponsibleChanging(value As String)
    End Sub
    Partial Private Sub OnCostCenterResponsibleChanged()
    End Sub
    Partial Private Sub OnItManagerChanging(value As String)
    End Sub
    Partial Private Sub OnItManagerChanged()
    End Sub
    Partial Private Sub OnAccountingUnitIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAccountingUnitIDChanged()
    End Sub
    Partial Private Sub OnNotesURLChanging(value As String)
    End Sub
    Partial Private Sub OnNotesURLChanged()
    End Sub
    Partial Private Sub OnDateConfirmedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateConfirmedChanged()
    End Sub
    Partial Private Sub OnOrderItemIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderItemIDChanged()
    End Sub
    Partial Private Sub OnDateOrderedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateOrderedChanged()
    End Sub
    Partial Private Sub OnQuantityAssignedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuantityAssignedChanged()
    End Sub
    Partial Private Sub OnDateAssignedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAssignedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Items = New EntitySet(Of Item)(AddressOf Me.attach_Items, AddressOf Me.detach_Items)
		Me._AccountingUnit = CType(Nothing, EntityRef(Of AccountingUnit))
		Me._OrderItem = CType(Nothing, EntityRef(Of OrderItem))
		Me._OrderableItem = CType(Nothing, EntityRef(Of OrderableItem))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iOrderableItemsID", Storage:="_OrderableItemsID", DbType:="Int NOT NULL")>  _
	Public Property OrderableItemsID() As Integer
		Get
			Return Me._OrderableItemsID
		End Get
		Set
			If ((Me._OrderableItemsID = value)  _
						= false) Then
				Me.OnOrderableItemsIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderableItemsID = value
				Me.SendPropertyChanged("OrderableItemsID")
				Me.OnOrderableItemsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iQuantityOrdered", Storage:="_QuantityOrdered", DbType:="Int NOT NULL")>  _
	Public Property QuantityOrdered() As Integer
		Get
			Return Me._QuantityOrdered
		End Get
		Set
			If ((Me._QuantityOrdered = value)  _
						= false) Then
				Me.OnQuantityOrderedChanging(value)
				Me.SendPropertyChanging
				Me._QuantityOrdered = value
				Me.SendPropertyChanged("QuantityOrdered")
				Me.OnQuantityOrderedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sOrderer", Storage:="_Orderer", DbType:="NVarChar(255)")>  _
	Public Property Orderer() As String
		Get
			Return Me._Orderer
		End Get
		Set
			If (String.Equals(Me._Orderer, value) = false) Then
				Me.OnOrdererChanging(value)
				Me.SendPropertyChanging
				Me._Orderer = value
				Me.SendPropertyChanged("Orderer")
				Me.OnOrdererChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sRecipientName", Storage:="_RecipientName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property RecipientName() As String
		Get
			Return Me._RecipientName
		End Get
		Set
			If (String.Equals(Me._RecipientName, value) = false) Then
				Me.OnRecipientNameChanging(value)
				Me.SendPropertyChanging
				Me._RecipientName = value
				Me.SendPropertyChanged("RecipientName")
				Me.OnRecipientNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sCostCenterResponsible", Storage:="_CostCenterResponsible", DbType:="NVarChar(255)")>  _
	Public Property CostCenterResponsible() As String
		Get
			Return Me._CostCenterResponsible
		End Get
		Set
			If (String.Equals(Me._CostCenterResponsible, value) = false) Then
				Me.OnCostCenterResponsibleChanging(value)
				Me.SendPropertyChanging
				Me._CostCenterResponsible = value
				Me.SendPropertyChanged("CostCenterResponsible")
				Me.OnCostCenterResponsibleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sItManager", Storage:="_ItManager", DbType:="NVarChar(255)")>  _
	Public Property ItManager() As String
		Get
			Return Me._ItManager
		End Get
		Set
			If (String.Equals(Me._ItManager, value) = false) Then
				Me.OnItManagerChanging(value)
				Me.SendPropertyChanging
				Me._ItManager = value
				Me.SendPropertyChanged("ItManager")
				Me.OnItManagerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iAccountingUnitID", Storage:="_AccountingUnitID", DbType:="Int NOT NULL")>  _
	Public Property AccountingUnitID() As Integer
		Get
			Return Me._AccountingUnitID
		End Get
		Set
			If ((Me._AccountingUnitID = value)  _
						= false) Then
				Me.OnAccountingUnitIDChanging(value)
				Me.SendPropertyChanging
				Me._AccountingUnitID = value
				Me.SendPropertyChanged("AccountingUnitID")
				Me.OnAccountingUnitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sNotesURL", Storage:="_NotesURL", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property NotesURL() As String
		Get
			Return Me._NotesURL
		End Get
		Set
			If (String.Equals(Me._NotesURL, value) = false) Then
				Me.OnNotesURLChanging(value)
				Me.SendPropertyChanging
				Me._NotesURL = value
				Me.SendPropertyChanged("NotesURL")
				Me.OnNotesURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="dDateConfirmed", Storage:="_DateConfirmed", DbType:="DateTime")>  _
	Public Property DateConfirmed() As System.Nullable(Of Date)
		Get
			Return Me._DateConfirmed
		End Get
		Set
			If (Me._DateConfirmed.Equals(value) = false) Then
				Me.OnDateConfirmedChanging(value)
				Me.SendPropertyChanging
				Me._DateConfirmed = value
				Me.SendPropertyChanged("DateConfirmed")
				Me.OnDateConfirmedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iOrderItemID", Storage:="_OrderItemID", DbType:="Int")>  _
	Public Property OrderItemID() As System.Nullable(Of Integer)
		Get
			Return Me._OrderItemID
		End Get
		Set
			If (Me._OrderItemID.Equals(value) = false) Then
				Me.OnOrderItemIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderItemID = value
				Me.SendPropertyChanged("OrderItemID")
				Me.OnOrderItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="dDateOrdered", Storage:="_DateOrdered", DbType:="DateTime")>  _
	Public Property DateOrdered() As System.Nullable(Of Date)
		Get
			Return Me._DateOrdered
		End Get
		Set
			If (Me._DateOrdered.Equals(value) = false) Then
				Me.OnDateOrderedChanging(value)
				Me.SendPropertyChanging
				Me._DateOrdered = value
				Me.SendPropertyChanged("DateOrdered")
				Me.OnDateOrderedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iQuantityAssigned", Storage:="_QuantityAssigned", DbType:="Int")>  _
	Public Property QuantityAssigned() As System.Nullable(Of Integer)
		Get
			Return Me._QuantityAssigned
		End Get
		Set
			If (Me._QuantityAssigned.Equals(value) = false) Then
				Me.OnQuantityAssignedChanging(value)
				Me.SendPropertyChanging
				Me._QuantityAssigned = value
				Me.SendPropertyChanged("QuantityAssigned")
				Me.OnQuantityAssignedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="dDateAssigned", Storage:="_DateAssigned", DbType:="DateTime")>  _
	Public Property DateAssigned() As System.Nullable(Of Date)
		Get
			Return Me._DateAssigned
		End Get
		Set
			If (Me._DateAssigned.Equals(value) = false) Then
				Me.OnDateAssignedChanging(value)
				Me.SendPropertyChanging
				Me._DateAssigned = value
				Me.SendPropertyChanged("DateAssigned")
				Me.OnDateAssignedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ConfirmedItem_Item", Storage:="_Items", ThisKey:="ID", OtherKey:="ConfirmedItemID")>  _
	Public Property Items() As EntitySet(Of Item)
		Get
			Return Me._Items
		End Get
		Set
			Me._Items.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AccountingUnit_ConfirmedItem", Storage:="_AccountingUnit", ThisKey:="AccountingUnitID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AccountingUnit() As AccountingUnit
		Get
			Return Me._AccountingUnit.Entity
		End Get
		Set
			Dim previousValue As AccountingUnit = Me._AccountingUnit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AccountingUnit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AccountingUnit.Entity = Nothing
					previousValue.ConfirmedItems.Remove(Me)
				End If
				Me._AccountingUnit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ConfirmedItems.Add(Me)
					Me._AccountingUnitID = value.ID
				Else
					Me._AccountingUnitID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AccountingUnit")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderItem_ConfirmedItem", Storage:="_OrderItem", ThisKey:="OrderItemID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property OrderItem() As OrderItem
		Get
			Return Me._OrderItem.Entity
		End Get
		Set
			Dim previousValue As OrderItem = Me._OrderItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OrderItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OrderItem.Entity = Nothing
					previousValue.ConfirmedItems.Remove(Me)
				End If
				Me._OrderItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ConfirmedItems.Add(Me)
					Me._OrderItemID = value.ID
				Else
					Me._OrderItemID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("OrderItem")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderableItem_ConfirmedItem", Storage:="_OrderableItem", ThisKey:="OrderableItemsID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property OrderableItem() As OrderableItem
		Get
			Return Me._OrderableItem.Entity
		End Get
		Set
			Dim previousValue As OrderableItem = Me._OrderableItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OrderableItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OrderableItem.Entity = Nothing
					previousValue.ConfirmedItems.Remove(Me)
				End If
				Me._OrderableItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ConfirmedItems.Add(Me)
					Me._OrderableItemsID = value.ID
				Else
					Me._OrderableItemsID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("OrderableItem")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Items(ByVal entity As Item)
		Me.SendPropertyChanging
		entity.ConfirmedItem = Me
	End Sub
	
	Private Sub detach_Items(ByVal entity As Item)
		Me.SendPropertyChanging
		entity.ConfirmedItem = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblOrderableItemOptions")>  _
Partial Public Class OrderableItemOption
	
	Private _OptionID As Integer
	
	Private _ItemID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iOptionID", Storage:="_OptionID", DbType:="Int NOT NULL")>  _
	Public Property OptionID() As Integer
		Get
			Return Me._OptionID
		End Get
		Set
			If ((Me._OptionID = value)  _
						= false) Then
				Me._OptionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iItemID", Storage:="_ItemID", DbType:="Int NOT NULL")>  _
	Public Property ItemID() As Integer
		Get
			Return Me._ItemID
		End Get
		Set
			If ((Me._ItemID = value)  _
						= false) Then
				Me._ItemID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblOrderableItems")>  _
Partial Public Class OrderableItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Order As System.Nullable(Of Integer)
	
	Private _ItemActive As Boolean
	
	Private _ReplacedByID As System.Nullable(Of Integer)
	
	Private _ItemClassID As Integer
	
	Private _SupplierID As Integer
	
	Private _DeviceCategory As String
	
	Private _SupplierNo As String
	
	Private _SupplierPrice As System.Nullable(Of Decimal)
	
	Private _Manufacturer As String
	
	Private _ManufacturerModel As String
	
	Private _ManufacturerDetails As String
	
	Private _ManufacturerNo As String
	
	Private _ItemVisibleToUser As Boolean
	
	Private _UserfriendlyName As String
	
	Private _UserfriendlyPrice As System.Nullable(Of Decimal)
	
	Private _EOL As System.Nullable(Of Date)
	
	Private _Image As String
	
	Private _Comments As String
	
	Private _ItemAvailInOrg As String
	
	Private _AimsStdSystemsID As System.Nullable(Of Integer)
	
	Private _OrderItems As EntitySet(Of OrderItem)
	
	Private _ConfirmedItems As EntitySet(Of ConfirmedItem)
	
	Private _ItemClass As EntityRef(Of ItemClass)
	
	Private _Supplier As EntityRef(Of Supplier)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderChanged()
    End Sub
    Partial Private Sub OnItemActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnItemActiveChanged()
    End Sub
    Partial Private Sub OnReplacedByIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReplacedByIDChanged()
    End Sub
    Partial Private Sub OnItemClassIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemClassIDChanged()
    End Sub
    Partial Private Sub OnSupplierIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSupplierIDChanged()
    End Sub
    Partial Private Sub OnDeviceCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceCategoryChanged()
    End Sub
    Partial Private Sub OnSupplierNoChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierNoChanged()
    End Sub
    Partial Private Sub OnSupplierPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSupplierPriceChanged()
    End Sub
    Partial Private Sub OnManufacturerChanging(value As String)
    End Sub
    Partial Private Sub OnManufacturerChanged()
    End Sub
    Partial Private Sub OnManufacturerModelChanging(value As String)
    End Sub
    Partial Private Sub OnManufacturerModelChanged()
    End Sub
    Partial Private Sub OnManufacturerDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnManufacturerDetailsChanged()
    End Sub
    Partial Private Sub OnManufacturerNoChanging(value As String)
    End Sub
    Partial Private Sub OnManufacturerNoChanged()
    End Sub
    Partial Private Sub OnItemVisibleToUserChanging(value As Boolean)
    End Sub
    Partial Private Sub OnItemVisibleToUserChanged()
    End Sub
    Partial Private Sub OnUserfriendlyNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserfriendlyNameChanged()
    End Sub
    Partial Private Sub OnUserfriendlyPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUserfriendlyPriceChanged()
    End Sub
    Partial Private Sub OnEOLChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEOLChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As String)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    Partial Private Sub OnItemAvailInOrgChanging(value As String)
    End Sub
    Partial Private Sub OnItemAvailInOrgChanged()
    End Sub
    Partial Private Sub OnAimsStdSystemsIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAimsStdSystemsIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
		Me._ConfirmedItems = New EntitySet(Of ConfirmedItem)(AddressOf Me.attach_ConfirmedItems, AddressOf Me.detach_ConfirmedItems)
		Me._ItemClass = CType(Nothing, EntityRef(Of ItemClass))
		Me._Supplier = CType(Nothing, EntityRef(Of Supplier))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iOrder", Storage:="_Order", DbType:="Int")>  _
	Public Property [Order]() As System.Nullable(Of Integer)
		Get
			Return Me._Order
		End Get
		Set
			If (Me._Order.Equals(value) = false) Then
				Me.OnOrderChanging(value)
				Me.SendPropertyChanging
				Me._Order = value
				Me.SendPropertyChanged("[Order]")
				Me.OnOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="bItemActive", Storage:="_ItemActive", DbType:="Bit NOT NULL")>  _
	Public Property ItemActive() As Boolean
		Get
			Return Me._ItemActive
		End Get
		Set
			If ((Me._ItemActive = value)  _
						= false) Then
				Me.OnItemActiveChanging(value)
				Me.SendPropertyChanging
				Me._ItemActive = value
				Me.SendPropertyChanged("ItemActive")
				Me.OnItemActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iReplacedByID", Storage:="_ReplacedByID", DbType:="Int")>  _
	Public Property ReplacedByID() As System.Nullable(Of Integer)
		Get
			Return Me._ReplacedByID
		End Get
		Set
			If (Me._ReplacedByID.Equals(value) = false) Then
				Me.OnReplacedByIDChanging(value)
				Me.SendPropertyChanging
				Me._ReplacedByID = value
				Me.SendPropertyChanged("ReplacedByID")
				Me.OnReplacedByIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iItemClassID", Storage:="_ItemClassID", DbType:="Int NOT NULL")>  _
	Public Property ItemClassID() As Integer
		Get
			Return Me._ItemClassID
		End Get
		Set
			If ((Me._ItemClassID = value)  _
						= false) Then
				Me.OnItemClassIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemClassID = value
				Me.SendPropertyChanged("ItemClassID")
				Me.OnItemClassIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iSupplierID", Storage:="_SupplierID", DbType:="Int NOT NULL")>  _
	Public Property SupplierID() As Integer
		Get
			Return Me._SupplierID
		End Get
		Set
			If ((Me._SupplierID = value)  _
						= false) Then
				Me.OnSupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._SupplierID = value
				Me.SendPropertyChanged("SupplierID")
				Me.OnSupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sDeviceCategory", Storage:="_DeviceCategory", DbType:="NVarChar(255)")>  _
	Public Property DeviceCategory() As String
		Get
			Return Me._DeviceCategory
		End Get
		Set
			If (String.Equals(Me._DeviceCategory, value) = false) Then
				Me.OnDeviceCategoryChanging(value)
				Me.SendPropertyChanging
				Me._DeviceCategory = value
				Me.SendPropertyChanged("DeviceCategory")
				Me.OnDeviceCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sSupplierNo", Storage:="_SupplierNo", DbType:="NVarChar(255)")>  _
	Public Property SupplierNo() As String
		Get
			Return Me._SupplierNo
		End Get
		Set
			If (String.Equals(Me._SupplierNo, value) = false) Then
				Me.OnSupplierNoChanging(value)
				Me.SendPropertyChanging
				Me._SupplierNo = value
				Me.SendPropertyChanged("SupplierNo")
				Me.OnSupplierNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="cSupplierPrice", Storage:="_SupplierPrice", DbType:="Money")>  _
	Public Property SupplierPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._SupplierPrice
		End Get
		Set
			If (Me._SupplierPrice.Equals(value) = false) Then
				Me.OnSupplierPriceChanging(value)
				Me.SendPropertyChanging
				Me._SupplierPrice = value
				Me.SendPropertyChanged("SupplierPrice")
				Me.OnSupplierPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sManufacturer", Storage:="_Manufacturer", DbType:="NVarChar(255)")>  _
	Public Property Manufacturer() As String
		Get
			Return Me._Manufacturer
		End Get
		Set
			If (String.Equals(Me._Manufacturer, value) = false) Then
				Me.OnManufacturerChanging(value)
				Me.SendPropertyChanging
				Me._Manufacturer = value
				Me.SendPropertyChanged("Manufacturer")
				Me.OnManufacturerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sManufacturerModel", Storage:="_ManufacturerModel", DbType:="NVarChar(255)")>  _
	Public Property ManufacturerModel() As String
		Get
			Return Me._ManufacturerModel
		End Get
		Set
			If (String.Equals(Me._ManufacturerModel, value) = false) Then
				Me.OnManufacturerModelChanging(value)
				Me.SendPropertyChanging
				Me._ManufacturerModel = value
				Me.SendPropertyChanged("ManufacturerModel")
				Me.OnManufacturerModelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sManufacturerDetails", Storage:="_ManufacturerDetails", DbType:="NVarChar(MAX)")>  _
	Public Property ManufacturerDetails() As String
		Get
			Return Me._ManufacturerDetails
		End Get
		Set
			If (String.Equals(Me._ManufacturerDetails, value) = false) Then
				Me.OnManufacturerDetailsChanging(value)
				Me.SendPropertyChanging
				Me._ManufacturerDetails = value
				Me.SendPropertyChanged("ManufacturerDetails")
				Me.OnManufacturerDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sManufacturerNo", Storage:="_ManufacturerNo", DbType:="NVarChar(255)")>  _
	Public Property ManufacturerNo() As String
		Get
			Return Me._ManufacturerNo
		End Get
		Set
			If (String.Equals(Me._ManufacturerNo, value) = false) Then
				Me.OnManufacturerNoChanging(value)
				Me.SendPropertyChanging
				Me._ManufacturerNo = value
				Me.SendPropertyChanged("ManufacturerNo")
				Me.OnManufacturerNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="bItemVisibleToUser", Storage:="_ItemVisibleToUser", DbType:="Bit NOT NULL")>  _
	Public Property ItemVisibleToUser() As Boolean
		Get
			Return Me._ItemVisibleToUser
		End Get
		Set
			If ((Me._ItemVisibleToUser = value)  _
						= false) Then
				Me.OnItemVisibleToUserChanging(value)
				Me.SendPropertyChanging
				Me._ItemVisibleToUser = value
				Me.SendPropertyChanged("ItemVisibleToUser")
				Me.OnItemVisibleToUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sUserfriendlyName", Storage:="_UserfriendlyName", DbType:="NVarChar(255)")>  _
	Public Property UserfriendlyName() As String
		Get
			Return Me._UserfriendlyName
		End Get
		Set
			If (String.Equals(Me._UserfriendlyName, value) = false) Then
				Me.OnUserfriendlyNameChanging(value)
				Me.SendPropertyChanging
				Me._UserfriendlyName = value
				Me.SendPropertyChanged("UserfriendlyName")
				Me.OnUserfriendlyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="cUserfriendlyPrice", Storage:="_UserfriendlyPrice", DbType:="Money")>  _
	Public Property UserfriendlyPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._UserfriendlyPrice
		End Get
		Set
			If (Me._UserfriendlyPrice.Equals(value) = false) Then
				Me.OnUserfriendlyPriceChanging(value)
				Me.SendPropertyChanging
				Me._UserfriendlyPrice = value
				Me.SendPropertyChanged("UserfriendlyPrice")
				Me.OnUserfriendlyPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="dEOL", Storage:="_EOL", DbType:="DateTime")>  _
	Public Property EOL() As System.Nullable(Of Date)
		Get
			Return Me._EOL
		End Get
		Set
			If (Me._EOL.Equals(value) = false) Then
				Me.OnEOLChanging(value)
				Me.SendPropertyChanging
				Me._EOL = value
				Me.SendPropertyChanged("EOL")
				Me.OnEOLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sImage", Storage:="_Image", DbType:="NVarChar(255)")>  _
	Public Property Image() As String
		Get
			Return Me._Image
		End Get
		Set
			If (String.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sComments", Storage:="_Comments", DbType:="NVarChar(MAX)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="sItemAvailInOrg", Storage:="_ItemAvailInOrg", DbType:="NVarChar(255)")>  _
	Public Property ItemAvailInOrg() As String
		Get
			Return Me._ItemAvailInOrg
		End Get
		Set
			If (String.Equals(Me._ItemAvailInOrg, value) = false) Then
				Me.OnItemAvailInOrgChanging(value)
				Me.SendPropertyChanging
				Me._ItemAvailInOrg = value
				Me.SendPropertyChanged("ItemAvailInOrg")
				Me.OnItemAvailInOrgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="iAimsStdSystemsID", Storage:="_AimsStdSystemsID", DbType:="Int")>  _
	Public Property AimsStdSystemsID() As System.Nullable(Of Integer)
		Get
			Return Me._AimsStdSystemsID
		End Get
		Set
			If (Me._AimsStdSystemsID.Equals(value) = false) Then
				Me.OnAimsStdSystemsIDChanging(value)
				Me.SendPropertyChanging
				Me._AimsStdSystemsID = value
				Me.SendPropertyChanged("AimsStdSystemsID")
				Me.OnAimsStdSystemsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderableItem_OrderItem", Storage:="_OrderItems", ThisKey:="ID", OtherKey:="OrderableItemsID")>  _
	Public Property OrderItems() As EntitySet(Of OrderItem)
		Get
			Return Me._OrderItems
		End Get
		Set
			Me._OrderItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderableItem_ConfirmedItem", Storage:="_ConfirmedItems", ThisKey:="ID", OtherKey:="OrderableItemsID")>  _
	Public Property ConfirmedItems() As EntitySet(Of ConfirmedItem)
		Get
			Return Me._ConfirmedItems
		End Get
		Set
			Me._ConfirmedItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ItemClass_OrderableItem", Storage:="_ItemClass", ThisKey:="ItemClassID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property ItemClass() As ItemClass
		Get
			Return Me._ItemClass.Entity
		End Get
		Set
			Dim previousValue As ItemClass = Me._ItemClass.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ItemClass.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ItemClass.Entity = Nothing
					previousValue.OrderableItems.Remove(Me)
				End If
				Me._ItemClass.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderableItems.Add(Me)
					Me._ItemClassID = value.ID
				Else
					Me._ItemClassID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ItemClass")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_OrderableItem", Storage:="_Supplier", ThisKey:="SupplierID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Supplier() As Supplier
		Get
			Return Me._Supplier.Entity
		End Get
		Set
			Dim previousValue As Supplier = Me._Supplier.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Supplier.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Supplier.Entity = Nothing
					previousValue.OrderableItems.Remove(Me)
				End If
				Me._Supplier.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderableItems.Add(Me)
					Me._SupplierID = value.ID
				Else
					Me._SupplierID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Supplier")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.OrderableItem = Me
	End Sub
	
	Private Sub detach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.OrderableItem = Nothing
	End Sub
	
	Private Sub attach_ConfirmedItems(ByVal entity As ConfirmedItem)
		Me.SendPropertyChanging
		entity.OrderableItem = Me
	End Sub
	
	Private Sub detach_ConfirmedItems(ByVal entity As ConfirmedItem)
		Me.SendPropertyChanging
		entity.OrderableItem = Nothing
	End Sub
End Class
